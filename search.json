[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Data, Data, Data",
    "section": "",
    "text": "import numpy as np\nimport seaborn as sns\nimport pandas as pd"
  },
  {
    "objectID": "proposal.html#dataset-1-nutrition-physical-activity-and-obesity",
    "href": "proposal.html#dataset-1-nutrition-physical-activity-and-obesity",
    "title": "Data, Data, Data",
    "section": "Dataset 1: Nutrition, physical activity, and obesity",
    "text": "Dataset 1: Nutrition, physical activity, and obesity\n\nIntroduction and data\nThis dataset was provided by the Centers for Disease Control and Provention (CDC), National Center for Chronic Disease prevention and Health Promotion, Division of Nutrition, Physical Activity, and Obesity. This data was collected through health-related telephone surveys that gather state data about U.S. Residents. This dataset has been used for the Data, Trends, and Maps database that the Division of Nutrition, Physical Activity, and Obesity (DNPAO) section of the CDC has, which is responsible for providing both state and national data for these topics.\n\nDescription of contents\nThis dataset includes over 104 thousand rows, and has 33 columns. Each row represents a combination of a year, state, survey question, and percent of individuals who are positively identified for that question, along with stratification. The categories for stratification are Age Range, Education, Gender, Income, Race/Ethnicity, and Total.\nSurvey questions fall into the categories of “Fruits and Vegetables - Behavior”, “Obesity/Weight Status”, and “Physical Activity - Behavior”. Examples of survey questions include “Percent of adults who engage in muscle-strengthening activities on 2 or more days a week” and “Percent of adults aged 18 years and older who have obesity”.\nThis dataset includes observations for the years 2011-2023. Percentages and data are not included for groups with insufficient sample sizes.\n\n\nEthical Concerns\nThere are no particular ethical concerns regarding working with this data. This dataset is aggregated, and numbers are excluded in instances where the sample size is too small. This removes concerns surrounding the personal identification of individuals within this dataset. This dataset is publicly available for anyone to download, and the licensing agreement states that it is free to be shared, created, and adapted, as long as it is attributed as the data source when publicly displayed or published. This removes concerns surrounding unfair or illegal acquisition and use of the data.\n\n\n\nResearch Question\n\nResearch Question: Do higher-income populations consistently have more time for physical activity than lower income populations?\n\nAdditional research questions include: How has the relationship between amount of physical activity and income changed over time? How does this vary between groups? And how does the amount of physical activity that lower-income populations have the time to do changed over the years?\nThe target population for this research question is U.S. Residents 18 and over, represented by the dataset\n\nThis question is important because it may highlight areas that correlate with differences in physical health across the population. If there are groupings that are identified that are tied to physical health and activity more than others, then more research can be done to identify ways in which these groups can receive more assistance with nutrition and adopting healthier lifestyles. \nThe research topic of interest here is whether or not there is a relationship between the amount of income that an individual makes and the amount of physical activity they are able to make time for. This falls in a larger category of interest surrounding differences between physical activity and nutrition for different groups and subsets of the population.\nWe hypothesize that individuals who have lower income levels will have less time for physical activity, showing that larger percentages of the low income population will fall into the “Percent of adults who engage in no leisure-time physical activity” group compared to individuals with higher incomes. \nThe variables in this research question are mostly categorical, the questions themselves and the groupings (income range) are both categorical. The percentage of respondents who fall into each category is a quantitative variable, and there is a time element (years) which can be used as well.\n\n\n\nGlimpse of data\n\nnutrition = pd.read_csv(\"data/nutrition.csv\")\n\n\nnutrition.head()\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n0\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\n2 or more races\nRACE\nRACE2PLUS\n\n\n1\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nOther\nRACE\nRACEOTH\n\n\n2\n2011\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nPA\nPA1\nQ044\nVALUE\n2\nGender\nFemale\nGEN\nFEMALE\n\n\n3\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nAge (years)\n35 - 44\nAGEYR\nAGEYR3544\n\n\n4\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ037\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n\n\n5 rows × 33 columns\n\n\n\n\nnutrition.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 104272 entries, 0 to 104271\nData columns (total 33 columns):\n #   Column                      Non-Null Count   Dtype  \n---  ------                      --------------   -----  \n 0   YearStart                   104272 non-null  int64  \n 1   YearEnd                     104272 non-null  int64  \n 2   LocationAbbr                104272 non-null  object \n 3   LocationDesc                104272 non-null  object \n 4   Datasource                  104272 non-null  object \n 5   Class                       104272 non-null  object \n 6   Topic                       104272 non-null  object \n 7   Question                    104272 non-null  object \n 8   Data_Value_Unit             88872 non-null   float64\n 9   Data_Value_Type             104272 non-null  object \n 10  Data_Value                  93505 non-null   float64\n 11  Data_Value_Alt              93505 non-null   float64\n 12  Data_Value_Footnote_Symbol  10767 non-null   object \n 13  Data_Value_Footnote         10767 non-null   object \n 14  Low_Confidence_Limit        93505 non-null   float64\n 15  High_Confidence_Limit       93505 non-null   float64\n 16  Sample_Size                 93505 non-null   float64\n 17  Total                       3724 non-null    object \n 18  Age(years)                  22344 non-null   object \n 19  Education                   14896 non-null   object \n 20  Gender                      7448 non-null    object \n 21  Income                      26068 non-null   object \n 22  Race/Ethnicity              29792 non-null   object \n 23  GeoLocation                 102340 non-null  object \n 24  ClassID                     104272 non-null  object \n 25  TopicID                     104272 non-null  object \n 26  QuestionID                  104272 non-null  object \n 27  DataValueTypeID             104272 non-null  object \n 28  LocationID                  104272 non-null  int64  \n 29  StratificationCategory1     104272 non-null  object \n 30  Stratification1             104272 non-null  object \n 31  StratificationCategoryId1   104272 non-null  object \n 32  StratificationID1           104272 non-null  object \ndtypes: float64(6), int64(3), object(24)\nmemory usage: 26.3+ MB\n\n\n\n\nAnalysis plan\nInitial detailed exploration of the data (focusing on the main variables involved) will be followed by data cleaning and some wrangling. Identification of missing observations, data type conversions, etc. will be addressed in these initial steps. The variables involved to answer the largest research question include the “Question” and “Income” and “StratificationCategoryId1” columns, as well as the “Data_Value” column and the “YearStart” column. New columns that group some of these variables may also be created, such as grouping the “Income” values into “Low Income” and “High Income”. At this point there is no plan to bring in and merge any external data.\nOnce the data has been wrangled, it can be visualized in an assortment of plots for analysis, and summary statistics by group can be compiled as well. These visualizations and statistics will allow for insight as to how the relationship between income and physical activity compares between groups, as well as over time. From here, additional metrics can be run, plots created, etc. to explore and dive in further."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "",
    "text": "In this Final Project for INFO 511: Fundamentals of Data Science, we set out to investigate the potential relationship between physical activity and income level. Through analysis of historical health survey data, we attempt to better understand whether there is a visible trend or relationship between socioeconomic status and leisure-time physical activity in US adults."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "",
    "text": "In this Final Project for INFO 511: Fundamentals of Data Science, we set out to investigate the potential relationship between physical activity and income level. Through analysis of historical health survey data, we attempt to better understand whether there is a visible trend or relationship between socioeconomic status and leisure-time physical activity in US adults."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "Introduction",
    "text": "Introduction\nUnderstanding the relationship between socioeconomic status and health behaviors is necessary for addressing disparities in public health outcomes. Our project seeks to understand whether higher-income populations consistently have more time for physical activity than lower income populations using a dataset from the Centers for Disease Control and Prevention (CDC). The dataset is specifically from the Behavioral Risk Factor Surveillance System project and was obtained from phone surveys conducted between 2011 and 2023. The whole dataset offers insights into physical activity, nutrition, and obesity trends among U.S. residents aged 18 and older. For the purpose of this project, we are focusing on the survey questions related to physical activity. The data is stratified by factors such as age, education, gender, income, and race/ethnicity."
  },
  {
    "objectID": "index.html#research-question",
    "href": "index.html#research-question",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "Research Question",
    "text": "Research Question\nDo higher-income populations have more time for physical activity than lower income populations?\nWe hypothesize that this is true, higher income populations have more time for physical activity. Therefore, populations will engage in more physical activity as their income level increases (positive relationship)."
  },
  {
    "objectID": "index.html#data",
    "href": "index.html#data",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "Data",
    "text": "Data\nDataset: Nutrition, Physical Activity, and Obesity - Behavioral Risk Factor Surveillance System\nThis dataset is hosted by the United States Center for Disease Control and was obtained from the Behavioral Risk Factor Surveillance System, a CDC project consisting of health-related phone surveys. The original dataset consists of 104,000 rows and 33 columns. Descriptions of all columns are available on the link above. Each row represents a combination of a year, state, survey question, and percent of individuals who are positively identified for that question, along with stratification. Data_Value contains the corresponding value collected for each survey question. The categories for stratification are Age Range, Education, Gender, Income, Race/Ethnicity, and Total. This dataset includes observations for the years 2011-2023. Percentages and data are not included for groups with insufficient sample sizes.\nThe main columns of interest for our research question are:\n\nYearStart and YearEnd: The year the data was collected. These are the same for every row.\nLocationAbbr and LocationDesc: Contains the abbreviation for the data where the data was collected.\nTopic: Contains the topic the variable being measured falls into. For our research question, we are interested in the topic “Physical Activity - Behavior”\nQuestion: What is being measured. Within “Physical Activity - Behavior” there are 5 questions:\n\nPercent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week\nPercent of adults who engage in no leisure-time physical activity\nPercent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)\nPercent of adults who engage in muscle-strengthening activities on 2 or more days a week\nPercent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)\n\nData_Value: The value being measured by the survey, in this case for these specific questions it will be a percentage.\nStratificationCategory1: What variable the data is being stratified by. Depending on the value in this column, it will contain a value in the columns “Race”, “Age (years)”, “Income”, etc. For our research question we are interested in the levels in Income, such as ‘Less than $15,000’, ‘$35,000 - $49,999’, etc.\nIncome: Contains the income level.\n\n\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n0\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\n2 or more races\nRACE\nRACE2PLUS\n\n\n1\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nOther\nRACE\nRACEOTH\n\n\n2\n2011\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nPA\nPA1\nQ044\nVALUE\n2\nGender\nFemale\nGEN\nFEMALE\n\n\n3\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nAge (years)\n35 - 44\nAGEYR\nAGEYR3544\n\n\n4\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ037\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n\n\n5 rows × 33 columns\n\n\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 104272 entries, 0 to 104271\nData columns (total 33 columns):\n #   Column                      Non-Null Count   Dtype  \n---  ------                      --------------   -----  \n 0   YearStart                   104272 non-null  int64  \n 1   YearEnd                     104272 non-null  int64  \n 2   LocationAbbr                104272 non-null  object \n 3   LocationDesc                104272 non-null  object \n 4   Datasource                  104272 non-null  object \n 5   Class                       104272 non-null  object \n 6   Topic                       104272 non-null  object \n 7   Question                    104272 non-null  object \n 8   Data_Value_Unit             88872 non-null   float64\n 9   Data_Value_Type             104272 non-null  object \n 10  Data_Value                  93505 non-null   float64\n 11  Data_Value_Alt              93505 non-null   float64\n 12  Data_Value_Footnote_Symbol  10767 non-null   object \n 13  Data_Value_Footnote         10767 non-null   object \n 14  Low_Confidence_Limit        93505 non-null   float64\n 15  High_Confidence_Limit       93505 non-null   float64\n 16  Sample_Size                 93505 non-null   float64\n 17  Total                       3724 non-null    object \n 18  Age(years)                  22344 non-null   object \n 19  Education                   14896 non-null   object \n 20  Gender                      7448 non-null    object \n 21  Income                      26068 non-null   object \n 22  Race/Ethnicity              29792 non-null   object \n 23  GeoLocation                 102340 non-null  object \n 24  ClassID                     104272 non-null  object \n 25  TopicID                     104272 non-null  object \n 26  QuestionID                  104272 non-null  object \n 27  DataValueTypeID             104272 non-null  object \n 28  LocationID                  104272 non-null  int64  \n 29  StratificationCategory1     104272 non-null  object \n 30  Stratification1             104272 non-null  object \n 31  StratificationCategoryId1   104272 non-null  object \n 32  StratificationID1           104272 non-null  object \ndtypes: float64(6), int64(3), object(24)\nmemory usage: 26.3+ MB\n\n\n\nData Cleaning and Wrangling, EDA\nThe columns YearStart and YearEnd always contain the same values so one of these columns can be dropped. We are only interested in the rows containing questions related to physical activity. Specifically, we are interested in the rows corresponding to the value in column Question that describes: “Percent of adults who engage in no leisure-time physical activity”. There were five measurements collected related to physical activity from the phone surveys from which the dataset was derived, though not all of these questions were asked every year. The following statements are how the measurements were described in the Question column, but were not the way the questions were presented to participants over the phone. The exact wording of the questions is available on the Behavioral Risk Factor Surveillance System website.\n\nPercent of adults who engage in no leisure-time physical activity\nPercent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)\nPercent of adults who engage in muscle-strengthening activities on 2 or more days a week\nPercent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)\nPercent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week\n\nThere are multiple columns containing the categories for stratification, such as education levels in the column Education. To answer our research question, we are most interested in the Income column. The data can also be separated by US state using the LocationAbbr (state abbreviation, i.e. “AZ”) or LocationDesc (full state text, i.e. “Arizona”) columns. There are also national measurements, using the abbreviation “US” or full text “National”.\nSome of the columns contained missing values. Missing values were dropped for the column Data_Value because the percentage values in this column were the focus of our analysis, and we were not interested in the years where this question was not measured. One abnormality of note in this dataset was the column Data_Value_Unit. This column was described as containing the unit of measurement for Data_Value, but this was not the case as the column contained years followed by a period. This may be indicative of a data entry error.\n\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n\n\n0 rows × 33 columns\n\n\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 13930 entries, 13 to 104269\nData columns (total 26 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   YearStart                   13930 non-null  int64  \n 1   LocationAbbr                13930 non-null  object \n 2   LocationDesc                13930 non-null  object \n 3   Datasource                  13930 non-null  object \n 4   Class                       13930 non-null  object \n 5   Topic                       13930 non-null  object \n 6   Question                    13930 non-null  object \n 7   Data_Value_Unit             11620 non-null  float64\n 8   Data_Value_Type             13930 non-null  object \n 9   Data_Value                  13775 non-null  float64\n 10  Data_Value_Alt              13775 non-null  float64\n 11  Data_Value_Footnote_Symbol  155 non-null    object \n 12  Data_Value_Footnote         155 non-null    object \n 13  Low_Confidence_Limit        13775 non-null  float64\n 14  High_Confidence_Limit       13775 non-null  float64\n 15  Sample_Size                 13775 non-null  float64\n 16  Income                      13930 non-null  object \n 17  ClassID                     13930 non-null  object \n 18  TopicID                     13930 non-null  object \n 19  QuestionID                  13930 non-null  object \n 20  DataValueTypeID             13930 non-null  object \n 21  LocationID                  13930 non-null  int64  \n 22  StratificationCategory1     13930 non-null  object \n 23  Stratification1             13930 non-null  object \n 24  StratificationCategoryId1   13930 non-null  object \n 25  StratificationID1           13930 non-null  object \ndtypes: float64(6), int64(2), object(18)\nmemory usage: 2.9+ MB\n\n\n\nEncoding income as a numeric value\nThe income level of the participants is encoded in the dataset as a string value. The income levels were placed into the following bins:\n\nLess than $15,000\n$15,000 - $24,999\n$25,000 - $34,999\n$35,000 - $49,999\n$50,000 - $74,999\n$75,000 or greater\n\nThis can be used as a nominal ordinal variable, but to do linear regression this must be converted to a numeric variable. For this project, we encoded the income as the first number in the range, such as 15,000 for $15,000 - $24,999."
  },
  {
    "objectID": "index.html#visualization-of-dataset",
    "href": "index.html#visualization-of-dataset",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "Visualization of Dataset",
    "text": "Visualization of Dataset\n\nOverview of National Levels of Leisure-Time Physical Activity\n\n\n\n\n\n\n\n\n\nThis violin plot shows the distribution and density of the data for each income group, with the y-axis representing the percentage of adults not engaging in physical activity and the x-axis denoting income categories. The lowest income category, “Less than $15,000”, has the highest percentage of adults who do not engage in any leisure-time physical activity, and the opposite is true for the highest income category, “$75,000 or greater”, which has the most adults who do engage in leisure-time physical activity.\nThis plot provides a general overview of the trends in the physical activity of American adults as related to income. Further analysis of this dataset shows the same association between higher income and higher percentages of adults who engage in physical activity.\n\n\n\n\n\n\n\n\n\nAnd while we were focusing on leisure-time physical activity, we did want to assess whether that disparity carried through the other questions about exercise. This facet grid helps compare the disparities between income groups for all exercise categories. On the far left you can see that there is a large disparity between the lowest and highest income bracket when it comes to no leisure time physical activity. However, that gap starts to shrink as we get to different types of exercise.\nIt is important to note that the only question in the survey that explicitly asked participants to only consider non-job related physical activity is the question about non-leisure time physical activity, which may be one reason the disparity begins to shrink so drastically in other exercise categories.\n\n\n\n\n\n\n\n\n\nThis scatter plot shows the percent of the sample population who does not engage in leisure time activity on the Y-axis graphed with their income. On the X-axis the income is encoded as the minimum income in the range. As a numeric value, so it can be used as a numeric variable for linear regression. The linear regression line shows a downward trend with percent engaging in no leisure time, activity being associated with lower incomes. The R squared value of 0 point 7 shows a moderately strong correlation between the percent and income."
  },
  {
    "objectID": "Code-Notebooks/Workspace_VSJ.html#packages",
    "href": "Code-Notebooks/Workspace_VSJ.html#packages",
    "title": "Notebook to test data",
    "section": "Packages",
    "text": "Packages\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf"
  },
  {
    "objectID": "Code-Notebooks/Workspace_VSJ.html#load-data",
    "href": "Code-Notebooks/Workspace_VSJ.html#load-data",
    "title": "Notebook to test data",
    "section": "Load data",
    "text": "Load data\n\nnutrition = pd.read_csv(\"../data/Nutrition.csv\")\n\nprint(nutrition.columns)\n\nIndex(['YearStart', 'YearEnd', 'LocationAbbr', 'LocationDesc', 'Datasource',\n       'Class', 'Topic', 'Question', 'Data_Value_Unit', 'Data_Value_Type',\n       'Data_Value', 'Data_Value_Alt', 'Data_Value_Footnote_Symbol',\n       'Data_Value_Footnote', 'Low_Confidence_Limit', 'High_Confidence_Limit ',\n       'Sample_Size', 'Total', 'Age(years)', 'Education', 'Gender', 'Income',\n       'Race/Ethnicity', 'GeoLocation', 'ClassID', 'TopicID', 'QuestionID',\n       'DataValueTypeID', 'LocationID', 'StratificationCategory1',\n       'Stratification1', 'StratificationCategoryId1', 'StratificationID1'],\n      dtype='object')\n\n\nThere are 33 columns, and 104,272 rows or observations\n\nnutrition.head(2)\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n0\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\n2 or more races\nRACE\nRACE2PLUS\n\n\n1\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nOther\nRACE\nRACEOTH\n\n\n\n\n2 rows × 33 columns\n\n\n\n\n# Obtaining unique values of all field of interest\n# column \"data_value\" gives us percent\nprint(nutrition['YearStart'].unique())\nprint(nutrition['Age(years)'].unique())\nprint(nutrition['Education'].unique())\nprint(nutrition['Gender'].unique())\nprint(nutrition['Income'].unique())\nprint(nutrition['Race/Ethnicity'].unique())\nprint(nutrition['Class'].unique())\nprint(nutrition['Topic'].unique())\nprint(nutrition['StratificationCategory1'].unique())\n\nnutrition['Question'].unique()\n\n[2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023]\n[nan '35 - 44' '25 - 34' '18 - 24' '55 - 64' '65 or older' '45 - 54']\n[nan 'Less than high school' 'Some college or technical school'\n 'High school graduate' 'College graduate']\n[nan 'Female' 'Male']\n[nan '$15,000 - $24,999' '$50,000 - $74,999' '$75,000 or greater'\n 'Less than $15,000' '$25,000 - $34,999' 'Data not reported'\n '$35,000 - $49,999']\n['2 or more races' 'Other' nan 'Non-Hispanic White' 'Asian'\n 'Hawaiian/Pacific Islander' 'American Indian/Alaska Native' 'Hispanic'\n 'Non-Hispanic Black']\n['Obesity / Weight Status' 'Physical Activity' 'Fruits and Vegetables']\n['Obesity / Weight Status' 'Physical Activity - Behavior'\n 'Fruits and Vegetables - Behavior']\n['Race/Ethnicity' 'Gender' 'Age (years)' 'Income' 'Education' 'Total']\n\n\narray(['Percent of adults aged 18 years and older who have obesity',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults aged 18 years and older who have an overweight classification',\n       'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who engage in no leisure-time physical activity',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who report consuming fruit less than one time daily',\n       'Percent of adults who report consuming vegetables less than one time daily'],\n      dtype=object)"
  },
  {
    "objectID": "Code-Notebooks/Workspace_VSJ.html#data-cleanup",
    "href": "Code-Notebooks/Workspace_VSJ.html#data-cleanup",
    "title": "Notebook to test data",
    "section": "Data Cleanup",
    "text": "Data Cleanup\n\ndata = nutrition\n\n# remove YearEnd column\ndata.loc[data['YearStart'] != data['YearEnd']]\nactivity = data.drop(columns='YearEnd')\n\n# only keep columns for physical activity\nactivity = activity.loc[activity['Topic'] == 'Physical Activity - Behavior']\n#activity.drop(columns=[\"Total\", \"Education\", \"Age(years)\", \"Gender\", \"Race/Ethnicity\", \"GeoLocation\"], inplace=True)\n#activity = activity[activity['StratificationCategory1'] == \"Income\"]\nactivity.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 55720 entries, 2 to 104271\nData columns (total 32 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   YearStart                   55720 non-null  int64  \n 1   LocationAbbr                55720 non-null  object \n 2   LocationDesc                55720 non-null  object \n 3   Datasource                  55720 non-null  object \n 4   Class                       55720 non-null  object \n 5   Topic                       55720 non-null  object \n 6   Question                    55720 non-null  object \n 7   Data_Value_Unit             46480 non-null  float64\n 8   Data_Value_Type             55720 non-null  object \n 9   Data_Value                  49962 non-null  float64\n 10  Data_Value_Alt              49962 non-null  float64\n 11  Data_Value_Footnote_Symbol  5758 non-null   object \n 12  Data_Value_Footnote         5758 non-null   object \n 13  Low_Confidence_Limit        49962 non-null  float64\n 14  High_Confidence_Limit       49962 non-null  float64\n 15  Sample_Size                 49962 non-null  float64\n 16  Total                       1990 non-null   object \n 17  Age(years)                  11940 non-null  object \n 18  Education                   7960 non-null   object \n 19  Gender                      3980 non-null   object \n 20  Income                      13930 non-null  object \n 21  Race/Ethnicity              15920 non-null  object \n 22  GeoLocation                 54684 non-null  object \n 23  ClassID                     55720 non-null  object \n 24  TopicID                     55720 non-null  object \n 25  QuestionID                  55720 non-null  object \n 26  DataValueTypeID             55720 non-null  object \n 27  LocationID                  55720 non-null  int64  \n 28  StratificationCategory1     55720 non-null  object \n 29  Stratification1             55720 non-null  object \n 30  StratificationCategoryId1   55720 non-null  object \n 31  StratificationID1           55720 non-null  object \ndtypes: float64(6), int64(2), object(24)\nmemory usage: 14.0+ MB\n\n\n\n# look for missing values\ncols_with_nulls = []\nfor col in activity.columns:\n    if activity[col].isna().sum() &gt; 0:\n        cols_with_nulls.append(col)\n\nprint(f\"Columns with 1 or more missing values:\")\nfor i in cols_with_nulls:\n    print(i)\n\nColumns with 1 or more missing values:\nData_Value_Unit\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nLow_Confidence_Limit\nHigh_Confidence_Limit \nSample_Size\nTotal\nAge(years)\nEducation\nGender\nIncome\nRace/Ethnicity\nGeoLocation\n\n\n\n# remove null values\n#activity = activity.dropna(subset=['Data_Value'])\n\n# print question\nprint('questions = ' +activity['Question'].unique())\n\n['questions = Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week'\n 'questions = Percent of adults who engage in muscle-strengthening activities on 2 or more days a week'\n 'questions = Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'\n 'questions = Percent of adults who engage in no leisure-time physical activity'\n 'questions = Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)']\n\n\n\n# maps income ranges to numeric values\nincome_dict = {'Less than $15,000':0,\n  '$15,000 - $24,999':15,\n  '$25,000 - $34,999':25, \n  \"$35,000 - $49,999\":35, \n  '$50,000 - $74,999':50, \n  '$75,000 or greater':75,\n        }\n\n# removes data not reported\nactivity_clean = activity.loc[activity['Income'] != 'Data not reported']\n\n# creates numeric column of income based on mappings\nactivity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_933/4033378066.py:14: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  activity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_933/4033378066.py:14: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  activity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n\n\n\n# setting up for plot\n# Question: Percent of adults who engage in no leisure-time physical activity\nnutrition_noleisuretime = activity_clean[activity_clean['Question']=='Percent of adults who engage in no leisure-time physical activity']\n# Stratified by income\nnutrition_noleisuretime_income = nutrition_noleisuretime[nutrition_noleisuretime['StratificationCategory1']=='Income']\n\n# Average the Percent of No Lesiure individuals by Year and Income Group:\ngrouped2 = nutrition_noleisuretime.groupby(['YearStart','numeric_income'])['Data_Value'].mean().reset_index()# No Lesiure by Income Group Print:\n\nprint(\"\\n\",\"View: Average No Leisure by Year and Income Group:\",\"\\n\",grouped2)\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\n\nsns.lmplot(data=grouped2, x=\"YearStart\", y=\"Data_Value\", hue=\"numeric_income\")\nplt.show()\n\nnutrition_noleisuretime_income_national = nutrition_noleisuretime_income[nutrition_noleisuretime_income['LocationDesc']==\"National\"]\n\nsns.lmplot(data=nutrition_noleisuretime_income_national, x=\"YearStart\", y=\"Data_Value\", hue=\"numeric_income\")\nplt.show()\n\n\n View: Average No Leisure by Year and Income Group: \n     YearStart  numeric_income  Data_Value\n0        2011             0.0   34.494231\n1        2011            15.0   33.398077\n2        2011            25.0   29.407692\n3        2011            35.0   25.611538\n4        2011            50.0   21.878846\n..        ...             ...         ...\n73       2023            15.0   40.047170\n74       2023            25.0   33.681132\n75       2023            35.0   28.626415\n76       2023            50.0   23.226415\n77       2023            75.0   18.550943\n\n[78 rows x 3 columns]\n\n\n&lt;Figure size 800x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#graph of just income lvel by response\norder = ['Less than $15,000',\n  '$15,000 - $24,999',\n  '$25,000 - $34,999', \n  \"$35,000 - $49,999\", \n  '$50,000 - $74,999', \n  '$75,000 or greater']\n# order data \nnutrition_noleisuretime_income_national['Income'] = pd.Categorical(nutrition_noleisuretime_income_national['Income'],categories=order, ordered=True)\n\nmypal = sns.color_palette('RdPu', 7)\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\nsns.violinplot(data=nutrition_noleisuretime_income_national, x=\"Income\", y=\"Data_Value\", palette='viridis')\nplt.xticks(rotation=-20)\nplt.ylabel('Percent')\nplt.title('From 2011-2023, Percent of Adults Who Do Not Engage in Leisure-Time Physical Activity')\nplt.text(2.1, -1, 'Source: CDC, Behavioral Risk Factor Surveillance System (2011 - 2023)', fontsize = 8)\nplt.show()\n\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_933/4271737826.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  nutrition_noleisuretime_income_national['Income'] = pd.Categorical(nutrition_noleisuretime_income_national['Income'],categories=order, ordered=True)\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_933/4271737826.py:15: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.violinplot(data=nutrition_noleisuretime_income_national, x=\"Income\", y=\"Data_Value\", palette='viridis')\n\n\n\n\n\n\n\n\n\n\n#only look at $75000 range to decipher width...\n\nnutrition_75k = nutrition_noleisuretime[nutrition_noleisuretime['numeric_income']==75]\n\ninc75k = activity_clean[activity_clean['numeric_income']==75]\n\nnutrition_50k = nutrition_noleisuretime[nutrition_noleisuretime['numeric_income']==50]\n\nnutrition_25k = nutrition_noleisuretime[nutrition_noleisuretime['numeric_income']==25]\n\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\n\n\nsns.lmplot(data=nutrition_75k , x=\"YearStart\", y=\"Data_Value\")\nplt.title(\"$75,000+ income\")\nplt.ylabel(\"percent of adults who do not have leisure-time activities\")\nplt.show()\n\n\n#\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\n\n\nsns.lmplot(data=inc75k , x=\"YearStart\", y=\"Data_Value\")\nplt.title(\"$75,000+ income, all questions\")\nplt.show()\n#\n\nsns.lmplot(data=nutrition_50k , x=\"YearStart\", y=\"Data_Value\")\nplt.show()\n\nsns.lmplot(data=nutrition_25k , x=\"YearStart\", y=\"Data_Value\")\nplt.show()\n\n&lt;Figure size 800x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 800x600 with 0 Axes&gt;"
  },
  {
    "objectID": "Code-Notebooks/Workspace_VSJ.html#visualizing",
    "href": "Code-Notebooks/Workspace_VSJ.html#visualizing",
    "title": "Notebook to test data",
    "section": "Visualizing",
    "text": "Visualizing\n\n# separating dataset by question\n\n# Question: Percent of adults who engage in no leisure-time physical activity\nnutrition_noleisuretime = nutrition[nutrition['Question']=='Percent of adults who engage in no leisure-time physical activity']\n# Stratified by income\nnutrition_noleisuretime_income = nutrition_noleisuretime[nutrition_noleisuretime['StratificationCategory1']=='Income']\n\n# Question: Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)\nnutrition_300min = nutrition[nutrition['Question']=='Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)']\n# Stratified by income\nnutrition_300min_income = nutrition_300min[nutrition_300min['StratificationCategory1']=='Income']\n\n# Question: Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week\nnutrition_150min = nutrition[nutrition['Question']=='Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week']\n# Stratified by income\nnutrition_150min_income = nutrition_150min[nutrition_150min['StratificationCategory1']=='Income']\n\n# Question: Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week\nnutrition_150min = nutrition[nutrition['Question']=='Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week']\n# Stratified by income\nnutrition_150min_income = nutrition_150min[nutrition_150min['StratificationCategory1']=='Income']\n\n\n# setting up for plot\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\n\n\nsns.lmplot(data=nutrition_noleisuretime_income, x=\"YearStart\", y=\"Data_Value\", hue=\"Income\")\nplt.show()\n\n\n&lt;Figure size 800x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n# Make copy and remove 'Data Not Reported' data\ngrouped2 = nutrition_noleisuretime_income.copy()\ngrouped2 = (grouped2[grouped2['Income'] != 'Data not reported'])\n\n# Group Income into Tiers\ngrouped2['Income_Group'] = np.where(grouped2['Income'] == 'Less than $15,000','Tier 1',np.where(\n    grouped2['Income'] == '$15,000 - $24,999', 'Tier 1', np.where(\n        grouped2['Income'] =='$25,000 - $34,999', 'Tier 2', np.where(\n           grouped2['Income'] == '$35,000 - $49,999', 'Tier 2', 'Tier 3'\n        )\n    ) \n))\n\n# View/Validate income groups:\nunique_combo1 = grouped2[['Income', 'Income_Group']].drop_duplicates()\nprint(unique_combo1)\n\n                 Income Income_Group\n16    $50,000 - $74,999       Tier 3\n59    Less than $15,000       Tier 1\n102   $35,000 - $49,999       Tier 2\n111   $25,000 - $34,999       Tier 2\n156   $15,000 - $24,999       Tier 1\n192  $75,000 or greater       Tier 3\n\n\nWe see that on average, those with a higher income are able to dedicate more time to working out.\nNeed to remove any “data not reported” data points.\nNext, we will break down these statistics based on stratifications (age, gender, race/ethnicity, and education).\n\n# looking at question \"Percent of adults who engage in no leisure-time physical activity\"\n\n# Stratified by race\nnutrition_noleisuretime_race = nutrition_noleisuretime[nutrition_noleisuretime['StratificationCategory1']=='Race/Ethnicity']\n\n# Stratified by gender\nnutrition_noleisuretime_gender = nutrition_noleisuretime[nutrition_noleisuretime['StratificationCategory1']=='Gender']\n\n# Stratified by age\nnutrition_noleisuretime_age = nutrition_noleisuretime[nutrition_noleisuretime['StratificationCategory1']=='Age (years)']\n\n# Stratified by education\nnutrition_noleisuretime_ed = nutrition_noleisuretime[nutrition_noleisuretime['StratificationCategory1']=='Education']\n\n\n\n# setting up for plot\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\n\n\nsns.lmplot(data=nutrition_noleisuretime_race, x=\"YearStart\", y=\"Data_Value\", hue=\"Race/Ethnicity\")\nplt.show()\n\n\nsns.lmplot(data=nutrition_noleisuretime_gender, x=\"YearStart\", y=\"Data_Value\", hue=\"Gender\")\nplt.show()\n\n\nsns.lmplot(data=nutrition_noleisuretime_age, x=\"YearStart\", y=\"Data_Value\", hue=\"Age(years)\")\nplt.show()\n\nsns.lmplot(data=nutrition_noleisuretime_ed, x=\"YearStart\", y=\"Data_Value\", hue=\"Education\")\nplt.show()\n\nc:\\Users\\veraj\\anaconda3\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n&lt;Figure size 800x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\nc:\\Users\\veraj\\anaconda3\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\n\n\n\n\nc:\\Users\\veraj\\anaconda3\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\n\n\n\n\nc:\\Users\\veraj\\anaconda3\\Lib\\site-packages\\seaborn\\axisgrid.py:118: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n\n\n\n\n\n\n\n\n\n\n#linear regression on model\n\nX = nutrition_noleisuretime_income[['numeric_income']]\nX = pd.get_dummies(X, drop_first = True)\ny = nutrition_noleisuretime_income['Data_Value']\n\nx = sm.add_constant(X)\nmodel = sm.OLS(y,x).fit()\nprint(model.summary2())\n\n              Results: Ordinary least squares\n============================================================\nModel:              OLS              Adj. R-squared:     nan\nDependent Variable: Data_Value       AIC:                nan\nDate:               2024-12-13 17:52 BIC:                nan\nNo. Observations:   4212             Log-Likelihood:     nan\nDf Model:           1                F-statistic:        nan\nDf Residuals:       4210             Prob (F-statistic): nan\nR-squared:          nan              Scale:              nan\n-------------------------------------------------------------\n                  Coef.  Std.Err.   t   P&gt;|t|  [0.025  0.975]\n-------------------------------------------------------------\nconst               nan       nan  nan    nan     nan     nan\nnumeric_income      nan       nan  nan    nan     nan     nan\n------------------------------------------------------------\nOmnibus:               nan       Durbin-Watson:          nan\nProb(Omnibus):         nan       Jarque-Bera (JB):       nan\nSkew:                  nan       Prob(JB):               nan\nKurtosis:              nan       Condition No.:          70 \n============================================================\nNotes:\n[1] Standard Errors assume that the covariance matrix of the\nerrors is correctly specified.\n\n\n\n# i’ll look at the confidence and sample sizes\nnutrition_noleisuretime_income_nonational = nutrition_noleisuretime_income[nutrition_noleisuretime_income['LocationDesc']!=\"National\"]\n\nnutrition_noleisuretime_income_nonational['confidencerange'] = nutrition_noleisuretime_income_nonational['High_Confidence_Limit ']-nutrition_noleisuretime_income_nonational['Low_Confidence_Limit']\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\nsns.scatterplot(data=nutrition_noleisuretime_income_nonational, x=\"YearStart\", y=\"confidencerange\", hue=\"Income\")\nplt.xticks(rotation=-20)\nplt.ylabel(\"Sample Size for 'No Leisure Time' Question\")\nplt.show()\n\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_933/995292957.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  nutrition_noleisuretime_income_nonational['confidencerange'] = nutrition_noleisuretime_income_nonational['High_Confidence_Limit ']-nutrition_noleisuretime_income_nonational['Low_Confidence_Limit']\n\n\n\n\n\n\n\n\n\n\n# facet grid by question\n\n\n\n\ng = sns.FacetGrid(activity, col=\"\", col_order=income_order, col_wrap=3)\ng.map(sns.lineplot, 'Year', 'Data_Value', 'Short_Question', palette='viridis')"
  },
  {
    "objectID": "Code-Notebooks/Workspace_SMG.html",
    "href": "Code-Notebooks/Workspace_SMG.html",
    "title": "Information about data",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nnutrition = pd.read_csv('../data/Nutrition.csv')\nnutrition.head()\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n0\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\n2 or more races\nRACE\nRACE2PLUS\n\n\n1\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nOther\nRACE\nRACEOTH\n\n\n2\n2011\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nPA\nPA1\nQ044\nVALUE\n2\nGender\nFemale\nGEN\nFEMALE\n\n\n3\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nAge (years)\n35 - 44\nAGEYR\nAGEYR3544\n\n\n4\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ037\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n\n\n5 rows × 33 columns\nnutrition.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 104272 entries, 0 to 104271\nData columns (total 33 columns):\n #   Column                      Non-Null Count   Dtype  \n---  ------                      --------------   -----  \n 0   YearStart                   104272 non-null  int64  \n 1   YearEnd                     104272 non-null  int64  \n 2   LocationAbbr                104272 non-null  object \n 3   LocationDesc                104272 non-null  object \n 4   Datasource                  104272 non-null  object \n 5   Class                       104272 non-null  object \n 6   Topic                       104272 non-null  object \n 7   Question                    104272 non-null  object \n 8   Data_Value_Unit             88872 non-null   float64\n 9   Data_Value_Type             104272 non-null  object \n 10  Data_Value                  93505 non-null   float64\n 11  Data_Value_Alt              93505 non-null   float64\n 12  Data_Value_Footnote_Symbol  10767 non-null   object \n 13  Data_Value_Footnote         10767 non-null   object \n 14  Low_Confidence_Limit        93505 non-null   float64\n 15  High_Confidence_Limit       93505 non-null   float64\n 16  Sample_Size                 93505 non-null   float64\n 17  Total                       3724 non-null    object \n 18  Age(years)                  22344 non-null   object \n 19  Education                   14896 non-null   object \n 20  Gender                      7448 non-null    object \n 21  Income                      26068 non-null   object \n 22  Race/Ethnicity              29792 non-null   object \n 23  GeoLocation                 102340 non-null  object \n 24  ClassID                     104272 non-null  object \n 25  TopicID                     104272 non-null  object \n 26  QuestionID                  104272 non-null  object \n 27  DataValueTypeID             104272 non-null  object \n 28  LocationID                  104272 non-null  int64  \n 29  StratificationCategory1     104272 non-null  object \n 30  Stratification1             104272 non-null  object \n 31  StratificationCategoryId1   104272 non-null  object \n 32  StratificationID1           104272 non-null  object \ndtypes: float64(6), int64(3), object(24)\nmemory usage: 26.3+ MB\nEach row represents a combination of a year, state, survey question, and percent of individuals who are positively identified for that question, along with stratification. The categories for stratification are Age Range, Education, Gender, Income, Race/Ethnicity, and Total.\nThis dataset includes observations for the years 2011-2023. Percentages and data are not included for groups with insufficient sample sizes.\nnutrition_clean = nutrition.copy()"
  },
  {
    "objectID": "Code-Notebooks/Workspace_SMG.html#dealing-with-missing-values-and-similar-columns",
    "href": "Code-Notebooks/Workspace_SMG.html#dealing-with-missing-values-and-similar-columns",
    "title": "Information about data",
    "section": "Dealing with Missing Values and Similar Columns",
    "text": "Dealing with Missing Values and Similar Columns\n\ncols_with_nulls = []\nfor col in nutrition_clean.columns:\n    if nutrition_clean[col].isna().sum() &gt; 0:\n        cols_with_nulls.append(col)\n\nprint(f\"Columns with 1 or more missing values:\")\nfor i in cols_with_nulls:\n    print(i)\n\nColumns with 1 or more missing values:\nData_Value_Unit\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nLow_Confidence_Limit\nHigh_Confidence_Limit \nSample_Size\nTotal\nAge(years)\nEducation\nGender\nIncome\nRace/Ethnicity\nGeoLocation\n\n\n\nData_Value_Unit\n\nnutrition_clean.loc[nutrition_clean['Data_Value_Unit'].isna()].head()\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n88872\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\n(64.84507995700051, -147.72205903599973)\nPA\nPA1\nQ047\nVALUE\n2\nRace/Ethnicity\nNon-Hispanic White\nRACE\nRACEWHT\n\n\n88873\n2022\n2022\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\nNaN\nValue\n...\n(64.84507995700051, -147.72205903599973)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nAsian\nRACE\nRACEASN\n\n\n88874\n2022\n2022\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\nNaN\nValue\n...\n(64.84507995700051, -147.72205903599973)\nOWS\nOWS1\nQ036\nVALUE\n2\nEducation\nHigh school graduate\nEDU\nEDUHSGRAD\n\n\n88875\n2022\n2022\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\nNaN\nValue\n...\n(64.84507995700051, -147.72205903599973)\nOWS\nOWS1\nQ036\nVALUE\n2\nIncome\nLess than $15,000\nINC\nINCLESS15\n\n\n88876\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\n(64.84507995700051, -147.72205903599973)\nPA\nPA1\nQ047\nVALUE\n2\nGender\nMale\nGEN\nMALE\n\n\n\n\n5 rows × 33 columns\n\n\n\n\nnutrition_clean.loc[nutrition_clean['Data_Value_Unit'].isna()]['Question'].unique()\n\narray(['Percent of adults who engage in no leisure-time physical activity',\n       'Percent of adults aged 18 years and older who have obesity',\n       'Percent of adults aged 18 years and older who have an overweight classification',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week'],\n      dtype=object)\n\n\n\nnutrition_clean['Data_Value_Unit'].unique()\n\narray([2011., 2012., 2013., 2014., 2015., 2016., 2017., 2018., 2019.,\n       2020., 2021.,   nan])\n\n\nThe description of the dataset describes Data_Value_Unit as “Description of unit e.g. %, etc” but this does not seem accurate, as the non-null values are years.\n\nnutrition_clean = nutrition_clean.drop(columns=['Data_Value_Unit'])\n\n\n\nData_Value\n\nprint(f'Percent Null: {(nutrition_clean['Data_Value'].isna().sum()/len(nutrition_clean))*100}')\n\nPercent Null: 10.325878471689427\n\n\nIt may be important to keep the null values to show the incompleteness of the data so I’m leaving them for right now.\n\n\nData_Value_Alt\nDescription: “Numeric representation of data value”\n\n# How many differences are there between Data_Value and Data_Value_Alt?\n(nutrition_clean['Data_Value'] == nutrition_clean['Data_Value_Alt']).value_counts()\n\nTrue     93505\nFalse    10767\nName: count, dtype: int64\n\n\n\n# What do these differences look like\nnutrition_clean.loc[(nutrition_clean['Data_Value_Alt'] != nutrition_clean['Data_Value']), ['Data_Value', 'Data_Value_Alt']]\n\n\n\n\n\n\n\n\nData_Value\nData_Value_Alt\n\n\n\n\n9\nNaN\nNaN\n\n\n10\nNaN\nNaN\n\n\n12\nNaN\nNaN\n\n\n18\nNaN\nNaN\n\n\n30\nNaN\nNaN\n\n\n...\n...\n...\n\n\n104233\nNaN\nNaN\n\n\n104237\nNaN\nNaN\n\n\n104238\nNaN\nNaN\n\n\n104248\nNaN\nNaN\n\n\n104263\nNaN\nNaN\n\n\n\n\n10767 rows × 2 columns\n\n\n\n\n# Are all of them pairs of NaNs?\nnutrition_clean.loc[((nutrition_clean['Data_Value_Alt'] != nutrition_clean['Data_Value']) & \n                     (nutrition_clean['Data_Value_Alt'].notna() | nutrition_clean['Data_Value'].notna())), \n                    ['Data_Value', 'Data_Value_Alt']]\n\n\n\n\n\n\n\n\nData_Value\nData_Value_Alt\n\n\n\n\n\n\n\n\n\nAll of the columns where Data_Value and Data_Value_Alt are not equal are pairs of NaNs (Python doesn’t see 2 NaNs as equal). It is reasonable to drop Data_Value_Alt here because it does not add any additional meaning to the data.\n\nnutrition_clean = nutrition_clean.drop(columns=['Data_Value_Alt'])\n\n\n\nData_Value_Footnote and Data_Value_Footnote_Symbol\n\n# What values are present in these columns?\nprint('Data_Value_Footnote:')\nprint(nutrition_clean['Data_Value_Footnote'].unique())\nprint('\\nData_Value_Footnote_Symbol:')\nprint(nutrition_clean['Data_Value_Footnote_Symbol'].unique())\n\nData_Value_Footnote:\n[nan 'Data not available because sample size is insufficient.']\n\nData_Value_Footnote_Symbol:\n[nan '~']\n\n\n\n# Are there any differences between these 2 columns?\n(nutrition_clean['Data_Value_Footnote'] == nutrition_clean['Data_Value_Footnote_Symbol']).value_counts()\n\nFalse    104272\nName: count, dtype: int64\n\n\nThere are no differences between these 2 columns and the column name is not very descriptive of what values are present in the columns. It would make more sense to have a column called “Sample_Size_Insufficient” with binary values.\n\nnutrition_clean['Sample_Size_Insufficient'] = nutrition_clean[\"Data_Value_Footnote_Symbol\"].map({np.nan:0, '~':1})\n\n\nnutrition_clean = nutrition_clean.drop(columns=['Data_Value_Footnote', 'Data_Value_Footnote_Symbol'])\n\n\n\nLow_Confidence_Limit and High_Confidence_Limit\n\n# Rename to remove trailing whitespace\nnutrition_clean['High_Confidence_Limit'] = nutrition_clean['High_Confidence_Limit ']\n\n\n# Drop column with extra whitespace\nnutrition_clean = nutrition_clean.drop(columns=['High_Confidence_Limit '])\n\n\n# What do these columns look like?\nnutrition_clean.loc[:,['Low_Confidence_Limit','High_Confidence_Limit']]\n\n\n\n\n\n\n\n\nLow_Confidence_Limit\nHigh_Confidence_Limit\n\n\n\n\n0\n16.1\n32.4\n\n\n1\n22.7\n50.9\n\n\n2\n19.1\n24.6\n\n\n3\n24.5\n35.0\n\n\n4\n26.2\n41.7\n\n\n...\n...\n...\n\n\n104267\n28.5\n35.2\n\n\n104268\n30.1\n34.7\n\n\n104269\n20.0\n25.2\n\n\n104270\n27.5\n44.8\n\n\n104271\n30.7\n39.0\n\n\n\n\n104272 rows × 2 columns\n\n\n\n\n# If there's a null in one column, are there nulls in both?\n(nutrition_clean['Low_Confidence_Limit'].isna() == nutrition_clean['High_Confidence_Limit'].isna()).value_counts()\n\nTrue    104272\nName: count, dtype: int64"
  },
  {
    "objectID": "Code-Notebooks/Workspace_CML.html",
    "href": "Code-Notebooks/Workspace_CML.html",
    "title": "Explore Dataset",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nbrfss = pd.read_csv('../data/Nutrition.csv')\n\n\n#explore the data\nbrfss.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 104272 entries, 0 to 104271\nData columns (total 33 columns):\n #   Column                      Non-Null Count   Dtype  \n---  ------                      --------------   -----  \n 0   YearStart                   104272 non-null  int64  \n 1   YearEnd                     104272 non-null  int64  \n 2   LocationAbbr                104272 non-null  object \n 3   LocationDesc                104272 non-null  object \n 4   Datasource                  104272 non-null  object \n 5   Class                       104272 non-null  object \n 6   Topic                       104272 non-null  object \n 7   Question                    104272 non-null  object \n 8   Data_Value_Unit             88872 non-null   float64\n 9   Data_Value_Type             104272 non-null  object \n 10  Data_Value                  93505 non-null   float64\n 11  Data_Value_Alt              93505 non-null   float64\n 12  Data_Value_Footnote_Symbol  10767 non-null   object \n 13  Data_Value_Footnote         10767 non-null   object \n 14  Low_Confidence_Limit        93505 non-null   float64\n 15  High_Confidence_Limit       93505 non-null   float64\n 16  Sample_Size                 93505 non-null   float64\n 17  Total                       3724 non-null    object \n 18  Age(years)                  22344 non-null   object \n 19  Education                   14896 non-null   object \n 20  Gender                      7448 non-null    object \n 21  Income                      26068 non-null   object \n 22  Race/Ethnicity              29792 non-null   object \n 23  GeoLocation                 102340 non-null  object \n 24  ClassID                     104272 non-null  object \n 25  TopicID                     104272 non-null  object \n 26  QuestionID                  104272 non-null  object \n 27  DataValueTypeID             104272 non-null  object \n 28  LocationID                  104272 non-null  int64  \n 29  StratificationCategory1     104272 non-null  object \n 30  Stratification1             104272 non-null  object \n 31  StratificationCategoryId1   104272 non-null  object \n 32  StratificationID1           104272 non-null  object \ndtypes: float64(6), int64(3), object(24)\nmemory usage: 26.3+ MB\n\n\n\nprint(\"Number of rows:\", len(brfss))\nprint(\"Number of columns (variables in the survey):\", len(brfss.columns))\nprint(brfss.columns)\n\nNumber of rows: 104272\nNumber of columns (variables in the survey): 33\nIndex(['YearStart', 'YearEnd', 'LocationAbbr', 'LocationDesc', 'Datasource',\n       'Class', 'Topic', 'Question', 'Data_Value_Unit', 'Data_Value_Type',\n       'Data_Value', 'Data_Value_Alt', 'Data_Value_Footnote_Symbol',\n       'Data_Value_Footnote', 'Low_Confidence_Limit', 'High_Confidence_Limit ',\n       'Sample_Size', 'Total', 'Age(years)', 'Education', 'Gender', 'Income',\n       'Race/Ethnicity', 'GeoLocation', 'ClassID', 'TopicID', 'QuestionID',\n       'DataValueTypeID', 'LocationID', 'StratificationCategory1',\n       'Stratification1', 'StratificationCategoryId1', 'StratificationID1'],\n      dtype='object')\n\n\n\nbrfss.isnull().sum()\n\nYearStart                          0\nYearEnd                            0\nLocationAbbr                       0\nLocationDesc                       0\nDatasource                         0\nClass                              0\nTopic                              0\nQuestion                           0\nData_Value_Unit                15400\nData_Value_Type                    0\nData_Value                     10767\nData_Value_Alt                 10767\nData_Value_Footnote_Symbol     93505\nData_Value_Footnote            93505\nLow_Confidence_Limit           10767\nHigh_Confidence_Limit          10767\nSample_Size                    10767\nTotal                         100548\nAge(years)                     81928\nEducation                      89376\nGender                         96824\nIncome                         78204\nRace/Ethnicity                 74480\nGeoLocation                     1932\nClassID                            0\nTopicID                            0\nQuestionID                         0\nDataValueTypeID                    0\nLocationID                         0\nStratificationCategory1            0\nStratification1                    0\nStratificationCategoryId1          0\nStratificationID1                  0\ndtype: int64\n\n\n\nbrfss.head(5)\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n0\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\n2 or more races\nRACE\nRACE2PLUS\n\n\n1\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nOther\nRACE\nRACEOTH\n\n\n2\n2011\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nPA\nPA1\nQ044\nVALUE\n2\nGender\nFemale\nGEN\nFEMALE\n\n\n3\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nAge (years)\n35 - 44\nAGEYR\nAGEYR3544\n\n\n4\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ037\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n\n\n5 rows × 33 columns\n\n\n\n\n# create new short df\nbrfss_short = brfss[['YearStart', 'LocationAbbr','Class', 'Topic', 'Question', 'Data_Value',\n                     'Data_Value_Alt', 'Data_Value_Footnote_Symbol','Data_Value_Footnote','Sample_Size', 'Total',\n                     'Age(years)', 'Education', 'Gender', 'Income','Race/Ethnicity']]\n\n\nfor col in brfss_short.columns:\n    if col != \"Data_Value\" and col != \"Data_Value_Alt\":\n        print(\"The Unique Values for {0} are: {1}\".format(col,brfss_short[col].unique()))\n\nThe Unique Values for YearStart are: [2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023]\nThe Unique Values for LocationAbbr are: ['AK' 'AL' 'AR' 'AZ' 'CA' 'CO' 'CT' 'DC' 'DE' 'FL' 'GA' 'HI' 'IA' 'ID'\n 'IL' 'IN' 'KS' 'KY' 'LA' 'MA' 'MD' 'ME' 'MI' 'MN' 'MO' 'MS' 'MT' 'NC'\n 'ND' 'NE' 'NH' 'NJ' 'NM' 'NV' 'NY' 'OH' 'OK' 'OR' 'PA' 'RI' 'SC' 'SD'\n 'TN' 'TX' 'US' 'UT' 'VA' 'VT' 'WA' 'WI' 'WV' 'WY' 'PR' 'GU' 'VI']\nThe Unique Values for Class are: ['Obesity / Weight Status' 'Physical Activity' 'Fruits and Vegetables']\nThe Unique Values for Topic are: ['Obesity / Weight Status' 'Physical Activity - Behavior'\n 'Fruits and Vegetables - Behavior']\nThe Unique Values for Question are: ['Percent of adults aged 18 years and older who have obesity'\n 'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week'\n 'Percent of adults aged 18 years and older who have an overweight classification'\n 'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week'\n 'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'\n 'Percent of adults who engage in no leisure-time physical activity'\n 'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'\n 'Percent of adults who report consuming fruit less than one time daily'\n 'Percent of adults who report consuming vegetables less than one time daily']\nThe Unique Values for Data_Value_Footnote_Symbol are: [nan '~']\nThe Unique Values for Data_Value_Footnote are: [nan 'Data not available because sample size is insufficient.']\nThe Unique Values for Sample_Size are: [ 128.   63. 1702. ... 4124. 4472. 3763.]\nThe Unique Values for Total are: [nan 'Total']\nThe Unique Values for Age(years) are: [nan '35 - 44' '25 - 34' '18 - 24' '55 - 64' '65 or older' '45 - 54']\nThe Unique Values for Education are: [nan 'Less than high school' 'Some college or technical school'\n 'High school graduate' 'College graduate']\nThe Unique Values for Gender are: [nan 'Female' 'Male']\nThe Unique Values for Income are: [nan '$15,000 - $24,999' '$50,000 - $74,999' '$75,000 or greater'\n 'Less than $15,000' '$25,000 - $34,999' 'Data not reported'\n '$35,000 - $49,999']\nThe Unique Values for Race/Ethnicity are: ['2 or more races' 'Other' nan 'Non-Hispanic White' 'Asian'\n 'Hawaiian/Pacific Islander' 'American Indian/Alaska Native' 'Hispanic'\n 'Non-Hispanic Black']\n\n\n\ninsufficient_rows = brfss_short[brfss_short['Data_Value_Footnote'] == 'Data not available because sample size is insufficient.']\nprint(\"There are {0} rows from brfss_short total {1} which are missing data because sample size is insufficient\".format(len(insufficient_rows),len(brfss_short)))\nprint(insufficient_rows.info())\nprint(insufficient_rows['Question'].unique())\nprint(insufficient_rows['Data_Value_Footnote_Symbol'].unique())\nprint(insufficient_rows['Race/Ethnicity'].unique())\n\nThere are 10767 rows from brfss_short total 104272 which are missing data because sample size is insufficient\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 10767 entries, 9 to 104263\nData columns (total 16 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   YearStart                   10767 non-null  int64  \n 1   LocationAbbr                10767 non-null  object \n 2   Class                       10767 non-null  object \n 3   Topic                       10767 non-null  object \n 4   Question                    10767 non-null  object \n 5   Data_Value                  0 non-null      float64\n 6   Data_Value_Alt              0 non-null      float64\n 7   Data_Value_Footnote_Symbol  10767 non-null  object \n 8   Data_Value_Footnote         10767 non-null  object \n 9   Sample_Size                 0 non-null      float64\n 10  Total                       40 non-null     object \n 11  Age(years)                  240 non-null    object \n 12  Education                   160 non-null    object \n 13  Gender                      80 non-null     object \n 14  Income                      285 non-null    object \n 15  Race/Ethnicity              9962 non-null   object \ndtypes: float64(3), int64(1), object(12)\nmemory usage: 1.4+ MB\nNone\n['Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'\n 'Percent of adults aged 18 years and older who have an overweight classification'\n 'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week'\n 'Percent of adults who engage in no leisure-time physical activity'\n 'Percent of adults aged 18 years and older who have obesity'\n 'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'\n 'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week'\n 'Percent of adults who report consuming fruit less than one time daily'\n 'Percent of adults who report consuming vegetables less than one time daily']\n['~']\n['Asian' 'Hawaiian/Pacific Islander' 'Non-Hispanic Black' 'Other'\n 'American Indian/Alaska Native' '2 or more races' 'Hispanic'\n 'Non-Hispanic White' nan]\n\n\n\ndisplay(insufficient_rows.head(5))\ndisplay(insufficient_rows.tail(5))\n\n\n\n\n\n\n\n\nYearStart\nLocationAbbr\nClass\nTopic\nQuestion\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nSample_Size\nTotal\nAge(years)\nEducation\nGender\nIncome\nRace/Ethnicity\n\n\n\n\n9\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 300 min...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAsian\n\n\n10\n2011\nAK\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAsian\n\n\n12\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAsian\n\n\n18\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nHawaiian/Pacific Islander\n\n\n30\n2011\nAK\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNon-Hispanic Black\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYearStart\nLocationAbbr\nClass\nTopic\nQuestion\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nSample_Size\nTotal\nAge(years)\nEducation\nGender\nIncome\nRace/Ethnicity\n\n\n\n\n104233\n2023\nWY\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 300 min...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNon-Hispanic Black\n\n\n104237\n2023\nWY\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNon-Hispanic Black\n\n\n104238\n2023\nWY\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nOther\n\n\n104248\n2023\nWY\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nHawaiian/Pacific Islander\n\n\n104263\n2023\nWY\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\nNaN\nNaN\n~\nData not available because sample size is insu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNon-Hispanic Black\n\n\n\n\n\n\n\n\nTransform & Clean Data\n\n# Drop empty data value rows\nbrfss_short.dropna(subset=['Data_Value'],inplace=True)\nprint(\"A total of {0} rows remain of the {1} original rows\".format(len(brfss_short),len(brfss)))\n\nA total of 93505 rows remain of the 104272 original rows\n\n\n\n#isolate physical activity questions\nactivity = brfss_short[brfss_short['Class']=='Physical Activity']\nactivity.head()\n\n\n\n\n\n\n\n\nYearStart\nLocationAbbr\nClass\nTopic\nQuestion\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nSample_Size\nTotal\nAge(years)\nEducation\nGender\nIncome\nRace/Ethnicity\n\n\n\n\n2\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n21.7\n21.7\nNaN\nNaN\n1702.0\nNaN\nNaN\nNaN\nFemale\nNaN\nNaN\n\n\n6\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\n28.8\n28.8\nNaN\nNaN\n232.0\nNaN\nNaN\nLess than high school\nNaN\nNaN\nNaN\n\n\n8\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\n35.9\n35.9\nNaN\nNaN\n2417.0\nNaN\nNaN\nNaN\nNaN\nNaN\nNon-Hispanic White\n\n\n13\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n17.3\n17.3\nNaN\nNaN\n349.0\nNaN\nNaN\nNaN\nNaN\n$15,000 - $24,999\nNaN\n\n\n16\n2011\nAK\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\n19.2\n19.2\nNaN\nNaN\n530.0\nNaN\nNaN\nNaN\nNaN\n$50,000 - $74,999\nNaN\n\n\n\n\n\n\n\n\nactivity['Question'].unique()\n\narray(['Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who engage in no leisure-time physical activity',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'],\n      dtype=object)\n\n\n\nmoderate_activity1 = activity[activity['Question'].str.contains('Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week', na=False)]\nprint(\"Years where moderate activity formulation 1 was asked:{0}\".format(moderate_activity1['YearStart'].unique()))\n\nmoderate_activity2 = activity[activity['Question'].str.contains(\"or an equivalent combination\", na=False) & activity['Question'].str.contains(\"75 minutes\", na=False)]\nprint(\"Years where moderate activity formulation 2 was asked:{0}\".format(moderate_activity2['YearStart'].unique()))\n\nintense_activity = activity[activity['Question'].str.contains('300 minutes', na=False)]\nprint(\"Years where intense activity was asked:{0}\".format(intense_activity['YearStart'].unique()))\n\nleisure_activity = activity[activity['Question'].str.contains('Percent of adults who engage in no leisure-time physical activity', na=False)]\nprint(\"Years where leisure activity was asked:{0}\".format(leisure_activity['YearStart'].unique()))\n\nYears where moderate activity formulation 1 was asked:[2011 2013 2015 2017 2019 2023]\nYears where moderate activity formulation 2 was asked:[2011 2013 2015 2017 2019 2023]\nYears where intense activity was asked:[2011 2013 2015 2017 2019 2023]\nYears where leisure activity was asked:[2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023]\n\n\n\n# drop even number years for consistency\neven_years = [2012 , 2014 , 2016 , 2018 , 2020 , 2021, 2022]\nactivity = activity[~activity['YearStart'].isin(even_years)]\nactivity['YearStart'].unique()\n\narray([2011, 2013, 2015, 2017, 2019, 2021, 2023])\n\n\n\n# create simple question column for visualization\nquestion_mapping = {\n    'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week': 'Moderate Exercise & Muscle Strengthening',\n    'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week': 'Muscle Strengthening',\n    'Percent of adults who engage in no leisure-time physical activity': 'No Leisure-time Physical Activity',\n    'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)': 'Moderate Exercise',\n    'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)': 'Intense exercise'\n}\nactivity['Short_Question'] = activity['Question'].map(question_mapping)\nprint(activity[['Question', 'Short_Question']].head())\n\n                                             Question  \\\n2   Percent of adults who achieve at least 150 min...   \n6   Percent of adults who engage in muscle-strengt...   \n8   Percent of adults who engage in muscle-strengt...   \n13  Percent of adults who achieve at least 150 min...   \n16  Percent of adults who engage in no leisure-tim...   \n\n                              Short_Question  \n2   Moderate Exercise & Muscle Strengthening  \n6                       Muscle Strengthening  \n8                       Muscle Strengthening  \n13  Moderate Exercise & Muscle Strengthening  \n16         No Leisure-time Physical Activity  \n\n\n\nfrom datetime import datetime\nactivity['Year'] = activity['YearStart'].apply(lambda x: datetime(x, 1, 1).strftime('%Y'))\n\n\n\nVisualize Data\n\n# Create the facet grid of histograms\n# Use FacetGrid to create a grid of histograms split by 'YearStart'\ng = sns.FacetGrid(activity, col=\"Year\", col_wrap=4, height=3)\ng.map(plt.hist, 'Data_Value', bins=20)\n\n# Adding some additional aesthetic enhancements\ng.set_titles('Year: {col_name}')  # Set titles for each subplot\ng.set_axis_labels('Data Value', 'Frequency')  # Set axis labels\n\n# Adjust the axis and display the plots\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Distribution of Data Values for Each Year')  # Overall title for all subplots\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n# Create the facet grid of histograms\n# Use FacetGrid to create a grid of histograms split by 'YearStart'\ng = sns.FacetGrid(activity, col=\"LocationAbbr\", palette='viridis', col_wrap=4)\ng.map(plt.hist, 'Data_Value', bins=20)\n\n# Adding some additional aesthetic enhancements\ng.set_titles('{col_name}')  # Set titles for each subplot\ng.set_axis_labels('Data Value', 'Frequency')  # Set axis labels\n\n# Adjust the axis and display the plots\ng.fig.suptitle('Distribution of Data Values for Each Year')  # Overall title for all subplots\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nactivity = activity[activity['Income'] != 'Data not reported']\nactivity['Income'].unique()\n\narray([nan, '$15,000 - $24,999', '$50,000 - $74,999',\n       '$75,000 or greater', '$25,000 - $34,999', 'Less than $15,000',\n       '$35,000 - $49,999'], dtype=object)\n\n\n\nno_activity = activity[activity['Short_Question']=='No Leisure-time Physical Activity']\n\n# Group data by year and income to see the mean physical activity level\nno_activity_by_year_income = no_activity.groupby(['Year', 'Income'])['Data_Value'].mean().unstack()\n\n# Plotting\nplt.figure(figsize=(12, 8))\nsns.lineplot(data=no_activity_by_year_income, palette='viridis')\nplt.title('Change in No Leisure-time Physical Activity over the Time')\nplt.ylabel('Percent of population')\nplt.xlabel('Year')\nplt.xticks(rotation=45)\nplt.legend(title='Income Brackets')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(activity, col=\"Short_Question\", hue='Income', col_wrap=3, aspect=1.5, palette='viridis')\ng.map(sns.regplot, 'YearStart', 'Data_Value', )\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\n\n# Enhancing the plot with titles and labels\ng.set_titles('{col_name}')  # Set titles to be each question\ng.set_axis_labels('Year', 'Percent of Pop')  # Set common axis labels\n\n# Adjust the top space to accommodate title\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Percent of Population for Each Exercise Class Over Years')\n\n# Adding the legend\ng.add_legend(title='Income Bracket')\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(activity, col=\"LocationAbbr\", hue='Income', col_wrap=4, palette='viridis')\ng.map(sns.regplot, 'YearStart', 'Data_Value', )\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\n\n# Enhancing the plot with titles and labels\ng.set_titles('{col_name}')  # Set titles to be each question\ng.set_axis_labels('Year', 'Percent of Pop')  # Set common axis labels\n\n# Adjust the top space to accommodate title\nplt.subplots_adjust(top=0.96)\ng.fig.suptitle('Percent of Population for Each State Over Years')\n\n# Adding the legend\ng.add_legend(title='Income Bracket')\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nincome_order = ['Less than $15,000','$15,000 - $24,999','$25,000 - $34,999','$35,000 - $49,999','$50,000 - $74,999','$75,000 or greater']\ng = sns.FacetGrid(activity, col=\"Income\", col_order=income_order, col_wrap=3)\ng.map(sns.lineplot, 'Year', 'Data_Value', 'Short_Question', palette='viridis')\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\n\n# Enhancing the plot with titles and labels\ng.set_titles('{col_name}')  # Set titles to be each Income Bracket\ng.set_axis_labels('Year', 'Percent of Pop')  # Set common axis labels\n\n# Adjust the top space to accommodate title\nplt.subplots_adjust(top=0.85)\ng.fig.suptitle('Percent of Population for Each Exercise Class Over Years')\n\n# Adding the legend\ng.add_legend(title='Exercise Level')\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nactivity_US = activity[activity['LocationAbbr']=='US']\nactivity_US.head(10)\n\n\n\n\n\n\n\n\nYearStart\nLocationAbbr\nClass\nTopic\nQuestion\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nSample_Size\nTotal\nAge(years)\nEducation\nGender\nIncome\nRace/Ethnicity\nShort_Question\nYear\n\n\n\n\n8625\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n18.4\n18.4\nNaN\nNaN\n47056.0\nNaN\nNaN\nNaN\nNaN\n$25,000 - $34,999\nNaN\nModerate Exercise & Muscle Strengthening\n2011\n\n\n8626\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\n31.2\n31.2\nNaN\nNaN\n6463.0\nNaN\nNaN\nNaN\nNaN\nNaN\nAmerican Indian/Alaska Native\nMuscle Strengthening\n2011\n\n\n8627\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\n21.6\n21.6\nNaN\nNaN\n65153.0\nNaN\nNaN\nNaN\nNaN\n$50,000 - $74,999\nNaN\nNo Leisure-time Physical Activity\n2011\n\n\n8628\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n20.4\n20.4\nNaN\nNaN\n59066.0\nNaN\n35 - 44\nNaN\nNaN\nNaN\nNaN\nModerate Exercise & Muscle Strengthening\n2011\n\n\n8629\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\n24.2\n24.2\nNaN\nNaN\n72819.0\nNaN\nNaN\nNaN\nNaN\n$15,000 - $24,999\nNaN\nMuscle Strengthening\n2011\n\n\n8630\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\n27.8\n27.8\nNaN\nNaN\n61088.0\nNaN\nNaN\nNaN\nNaN\n$35,000 - $49,999\nNaN\nMuscle Strengthening\n2011\n\n\n8632\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n50.2\n50.2\nNaN\nNaN\n277769.0\nNaN\nNaN\nNaN\nFemale\nNaN\nNaN\nModerate Exercise\n2011\n\n\n8633\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n50.9\n50.9\nNaN\nNaN\n104475.0\nNaN\n55 - 64\nNaN\nNaN\nNaN\nNaN\nModerate Exercise\n2011\n\n\n8634\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\n33.3\n33.3\nNaN\nNaN\n73792.0\nNaN\nNaN\nNaN\nNaN\n$15,000 - $24,999\nNaN\nNo Leisure-time Physical Activity\n2011\n\n\n8635\n2011\nUS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\n34.2\n34.2\nNaN\nNaN\n49590.0\nNaN\nNaN\nNaN\nNaN\nLess than $15,000\nNaN\nNo Leisure-time Physical Activity\n2011\n\n\n\n\n\n\n\n\n### New viz with just full nation\n# Create the facet grid of histograms\n# Use FacetGrid to create a grid of histograms split by 'YearStart'\ng = sns.FacetGrid(activity_US, col=\"Year\", col_wrap=4, height=3)\ng.map(plt.hist, 'Data_Value', bins=20)\n\n# Adding some additional aesthetic enhancements\ng.set_titles('Year: {col_name}')  # Set titles for each subplot\ng.set_axis_labels('Data Value', 'Frequency')  # Set axis labels\n\n# Adjust the axis and display the plots\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Distribution of Data Values for Each Year')  # Overall title for all subplots\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nexercise_order = ['No Leisure-time Physical Activity','Muscle Strengthening','Moderate Exercise','Moderate Exercise & Muscle Strengthening', 'Intense exercise']\n\ng = sns.FacetGrid(activity_US, col=\"Short_Question\", hue='Income', hue_order=income_order, col_order=exercise_order, col_wrap=3, aspect=1.5, palette='viridis')\ng.map(sns.regplot, 'YearStart', 'Data_Value', )\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\n\n# Enhancing the plot with titles and labels\ng.set_titles('{col_name}')  # Set titles to be each question\ng.set_axis_labels('Year', 'Percent of Pop')  # Set common axis labels\n\n# Adjust the top space to accommodate title\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Percent of Population for Each Exercise Class Over Years')\n\n# Adding the legend\ng.add_legend(title='Income Bracket')\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\ng = sns.FacetGrid(activity_US, col=\"Income\", col_order=income_order, col_wrap=3)\ng.map(sns.lineplot, 'Year', 'Data_Value', 'Short_Question', palette='viridis')\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\n\n# Enhancing the plot with titles and labels\ng.set_titles('{col_name}')  # Set titles to be each Income Bracket\ng.set_axis_labels('Year', 'Percent of Pop')  # Set common axis labels\n\n# Adjust the top space to accommodate title\nplt.subplots_adjust(top=0.85)\ng.fig.suptitle('Percent of Population for Each Exercise Class Over Years')\n\n# Adding the legend\ng.add_legend(title='Exercise Level')\n# Show the plot\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project was developed by [The Outliers] For INFO 511 - Fundamentals of Data Science at the University of Arizona, taught by Dr. Greg Chism. The team is comprised of the following team members.\n\nSarah Gilbride: Master’s student in Data Science program, based in Phoenix, AZ\nMiguel Peralta: Master’s student in Data Science, based in Tucson, AZ\nVera Jackson: Master’s student in Data Science program, based in Chicago, IL\nQuinn Jones: Master’s of Data Science student, based in Salem, OR\nCas Laskowski: PhD in Information, Tucson, AZ"
  },
  {
    "objectID": "Code-Notebooks/index.html",
    "href": "Code-Notebooks/index.html",
    "title": "Exploring income and physical activity disparities in the US",
    "section": "",
    "text": "import pandas as pd\ndata = pd.read_csv('../data/Nutrition.csv')\ndata.head()\n\ndata.info()\n\n\n\n\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 104272 entries, 0 to 104271\nData columns (total 33 columns):\n #   Column                      Non-Null Count   Dtype  \n---  ------                      --------------   -----  \n 0   YearStart                   104272 non-null  int64  \n 1   YearEnd                     104272 non-null  int64  \n 2   LocationAbbr                104272 non-null  object \n 3   LocationDesc                104272 non-null  object \n 4   Datasource                  104272 non-null  object \n 5   Class                       104272 non-null  object \n 6   Topic                       104272 non-null  object \n 7   Question                    104272 non-null  object \n 8   Data_Value_Unit             88872 non-null   float64\n 9   Data_Value_Type             104272 non-null  object \n 10  Data_Value                  93505 non-null   float64\n 11  Data_Value_Alt              93505 non-null   float64\n 12  Data_Value_Footnote_Symbol  10767 non-null   object \n 13  Data_Value_Footnote         10767 non-null   object \n 14  Low_Confidence_Limit        93505 non-null   float64\n 15  High_Confidence_Limit       93505 non-null   float64\n 16  Sample_Size                 93505 non-null   float64\n 17  Total                       3724 non-null    object \n 18  Age(years)                  22344 non-null   object \n 19  Education                   14896 non-null   object \n 20  Gender                      7448 non-null    object \n 21  Income                      26068 non-null   object \n 22  Race/Ethnicity              29792 non-null   object \n 23  GeoLocation                 102340 non-null  object \n 24  ClassID                     104272 non-null  object \n 25  TopicID                     104272 non-null  object \n 26  QuestionID                  104272 non-null  object \n 27  DataValueTypeID             104272 non-null  object \n 28  LocationID                  104272 non-null  int64  \n 29  StratificationCategory1     104272 non-null  object \n 30  Stratification1             104272 non-null  object \n 31  StratificationCategoryId1   104272 non-null  object \n 32  StratificationID1           104272 non-null  object \ndtypes: float64(6), int64(3), object(24)\nmemory usage: 26.3+ MB\n\n\n\n\ndata.loc[data['YearStart'] != data['YearEnd']]\n\nactivity = data.drop(columns='YearEnd')\n\nactivity = activity.loc[activity['Topic'] == 'Physical Activity - Behavior']\nactivity.drop(columns=[\"Total\", \"Education\", \"Age(years)\", \"Gender\", \"Race/Ethnicity\", \"GeoLocation\"], inplace=True)\nactivity = activity[activity['StratificationCategory1'] == \"Income\"]\nactivity.info()\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 13930 entries, 13 to 104269\nData columns (total 26 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   YearStart                   13930 non-null  int64  \n 1   LocationAbbr                13930 non-null  object \n 2   LocationDesc                13930 non-null  object \n 3   Datasource                  13930 non-null  object \n 4   Class                       13930 non-null  object \n 5   Topic                       13930 non-null  object \n 6   Question                    13930 non-null  object \n 7   Data_Value_Unit             11620 non-null  float64\n 8   Data_Value_Type             13930 non-null  object \n 9   Data_Value                  13775 non-null  float64\n 10  Data_Value_Alt              13775 non-null  float64\n 11  Data_Value_Footnote_Symbol  155 non-null    object \n 12  Data_Value_Footnote         155 non-null    object \n 13  Low_Confidence_Limit        13775 non-null  float64\n 14  High_Confidence_Limit       13775 non-null  float64\n 15  Sample_Size                 13775 non-null  float64\n 16  Income                      13930 non-null  object \n 17  ClassID                     13930 non-null  object \n 18  TopicID                     13930 non-null  object \n 19  QuestionID                  13930 non-null  object \n 20  DataValueTypeID             13930 non-null  object \n 21  LocationID                  13930 non-null  int64  \n 22  StratificationCategory1     13930 non-null  object \n 23  Stratification1             13930 non-null  object \n 24  StratificationCategoryId1   13930 non-null  object \n 25  StratificationID1           13930 non-null  object \ndtypes: float64(6), int64(2), object(18)\nmemory usage: 2.9+ MB\n\n\n\n# maps income ranges to numeric values\nincome_dict = {'Less than $15,000':0,\n  '$15,000 - $24,999':15,\n  '$25,000 - $34,999':25,\n  \"$35,000 - $49,999\":35,\n  '$50,000 - $74,999':50,\n  '$75,000 or greater':75,\n        }\n\n# removes data not reported\nactivity_clean = activity.loc[activity['Income'] != 'Data not reported']\n\n# creates numeric column of income based on mappings\nactivity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/3216604992.py:14: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  activity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/3216604992.py:14: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  activity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n\n\n\n# onyl include question of interest\nnoleisuretime = activity_clean[activity_clean['Question']=='Percent of adults who engage in no leisure-time physical activity']\n\n# Stratified by income\nnoleisuretime_income = noleisuretime[noleisuretime['StratificationCategory1']=='Income']\n\n# Only include national data, disregarding results from individual states\nnoleisuretime_income_national = noleisuretime_income[noleisuretime_income['LocationDesc']==\"National\"]\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\norder = ['Less than $15,000',\n  '$15,000 - $24,999',\n  '$25,000 - $34,999',\n  \"$35,000 - $49,999\",\n  '$50,000 - $74,999',\n  '$75,000 or greater']\n\n# order data\nnoleisuretime_income_national['Income'] = pd.Categorical(noleisuretime_income_national['Income'],categories=order, ordered=True)\n\n# plot\nsns.set_style('whitegrid')\nplt.figure(figsize=(8,6))\n\nsns.violinplot(data=noleisuretime_income_national, x=\"Income\", y=\"Data_Value\", palette='viridis')\nplt.xticks(rotation=-20)\nplt.ylabel('Percent')\nplt.title('Percent of US Adults Who Do Not Engage in Leisure-Time Physical Activity (2011-2023)')\nplt.text(2.1, -1, 'Source: CDC, Behavioral Risk Factor Surveillance System (2011 - 2023)', fontsize = 8)\n\nplt.show()\n\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/2966736973.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  noleisuretime_income_national['Income'] = pd.Categorical(noleisuretime_income_national['Income'],categories=order, ordered=True)\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/2966736973.py:15: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.violinplot(data=noleisuretime_income_national, x=\"Income\", y=\"Data_Value\", palette='viridis')\n\n\n\n\n\n\n\n\n\n\nquestion_mapping = {\n    'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week': 'Moderate Exercise & Muscle Strengthening',\n    'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week': 'Muscle Strengthening',\n    'Percent of adults who engage in no leisure-time physical activity': 'No Leisure-time Physical Activity',\n    'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)': 'Moderate Exercise',\n    'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)': 'Intense exercise'\n}\n\nactivity_clean['Short_Question'] = activity_clean['Question'].map(question_mapping)\nactivity_clean['Question'].map(question_mapping)\n\nnational = activity_clean[activity_clean['LocationDesc'] == 'National']\n\ng = sns.FacetGrid(national, col=\"Short_Question\", hue='Income', hue_order=order, col_wrap=3, aspect=1.5, palette='viridis')\ng.map(sns.regplot, 'YearStart', 'Data_Value', )\n\n# Rotate the x-axis labels for better readability\nfor ax in g.axes.flat:\n    for label in ax.get_xticklabels():\n        label.set_rotation(45)\n\n# Enhancing the plot with titles and labels\ng.set_titles('{col_name}')  # Set titles to be each question\ng.set_axis_labels('Year', 'Percent of Pop')  # Set common axis labels\n\n# Adjust the top space to accommodate title\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Percent of Population for Each Exercise Class Over Years')\n\n# Adding the legend\ng.add_legend(title='Income Bracket')\n# Show the plot\nplt.show()\n\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/504065497.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  activity_clean['Short_Question'] = activity_clean['Question'].map(question_mapping)\n\n\n\n\n\n\n\n\n\n\nfrom sklearn.linear_model import LinearRegression\n\nsns.set_style(style='whitegrid')\nsns.scatterplot(data=noleisuretime, x='numeric_income', y='Data_Value', alpha=0.1)\n\nnoleisuretime['Data_Value'].dropna()\n\nmodel = LinearRegression()\nx = noleisuretime[['numeric_income']]\ny = noleisuretime['Data_Value']\nmodel.fit(x, y)\n\nslope = model.coef_[0]\nintercept = model.intercept_\nr_squared = model.score(x, y)\n\nx_range = np.linspace(x.min(), x.max(), 100)  # Range of x values\ny_pred = model.predict(x_range)  # Predicted y values\nplt.plot(x_range, y_pred, color='red', label=f\"y = {slope:.2f}x + {intercept:.2f}, $R^2$ = {r_squared:.2f}\")\n\nplt.title(\"Percent of sample population who engage in no leisure time activity\", fontsize=14)\nplt.xlabel(\"Minimum Income in Range (i.e. 15,000 for \\$15,000 - \\$24,999)\", fontsize=12)\nplt.ylabel(\"Percent of Sample Population\", fontsize=12)\nplt.legend()\nplt.show()\n\n&lt;&gt;:22: SyntaxWarning: invalid escape sequence '\\$'\n&lt;&gt;:22: SyntaxWarning: invalid escape sequence '\\$'\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/3313616050.py:22: SyntaxWarning: invalid escape sequence '\\$'\n  plt.xlabel(\"Minimum Income in Range (i.e. 15,000 for \\$15,000 - \\$24,999)\", fontsize=12)\n/var/folders/37/h4qvqqks7tx9rp77777_dk2c0000gn/T/ipykernel_32183/3313616050.py:22: SyntaxWarning: invalid escape sequence '\\$'\n  plt.xlabel(\"Minimum Income in Range (i.e. 15,000 for \\$15,000 - \\$24,999)\", fontsize=12)\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[12], line 11\n      9 x = noleisuretime[['numeric_income']]\n     10 y = noleisuretime['Data_Value']\n---&gt; 11 model.fit(x, y)\n     13 slope = model.coef_[0]\n     14 intercept = model.intercept_\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/base.py:1473, in _fit_context.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(estimator, *args, **kwargs)\n   1466     estimator._validate_params()\n   1468 with config_context(\n   1469     skip_parameter_validation=(\n   1470         prefer_skip_nested_validation or global_skip_validation\n   1471     )\n   1472 ):\n-&gt; 1473     return fit_method(estimator, *args, **kwargs)\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/linear_model/_base.py:609, in LinearRegression.fit(self, X, y, sample_weight)\n    605 n_jobs_ = self.n_jobs\n    607 accept_sparse = False if self.positive else [\"csr\", \"csc\", \"coo\"]\n--&gt; 609 X, y = self._validate_data(\n    610     X,\n    611     y,\n    612     accept_sparse=accept_sparse,\n    613     y_numeric=True,\n    614     multi_output=True,\n    615     force_writeable=True,\n    616 )\n    618 has_sw = sample_weight is not None\n    619 if has_sw:\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/base.py:650, in BaseEstimator._validate_data(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\n    648         y = check_array(y, input_name=\"y\", **check_y_params)\n    649     else:\n--&gt; 650         X, y = check_X_y(X, y, **check_params)\n    651     out = X, y\n    653 if not no_val_X and check_params.get(\"ensure_2d\", True):\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/utils/validation.py:1318, in check_X_y(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\n   1297     raise ValueError(\n   1298         f\"{estimator_name} requires y to be passed, but the target y is None\"\n   1299     )\n   1301 X = check_array(\n   1302     X,\n   1303     accept_sparse=accept_sparse,\n   (...)\n   1315     input_name=\"X\",\n   1316 )\n-&gt; 1318 y = _check_y(y, multi_output=multi_output, y_numeric=y_numeric, estimator=estimator)\n   1320 check_consistent_length(X, y)\n   1322 return X, y\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/utils/validation.py:1328, in _check_y(y, multi_output, y_numeric, estimator)\n   1326 \"\"\"Isolated part of check_X_y dedicated to y validation\"\"\"\n   1327 if multi_output:\n-&gt; 1328     y = check_array(\n   1329         y,\n   1330         accept_sparse=\"csr\",\n   1331         force_all_finite=True,\n   1332         ensure_2d=False,\n   1333         dtype=None,\n   1334         input_name=\"y\",\n   1335         estimator=estimator,\n   1336     )\n   1337 else:\n   1338     estimator_name = _check_estimator_name(estimator)\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/utils/validation.py:1064, in check_array(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\n   1058     raise ValueError(\n   1059         \"Found array with dim %d. %s expected &lt;= 2.\"\n   1060         % (array.ndim, estimator_name)\n   1061     )\n   1063 if force_all_finite:\n-&gt; 1064     _assert_all_finite(\n   1065         array,\n   1066         input_name=input_name,\n   1067         estimator_name=estimator_name,\n   1068         allow_nan=force_all_finite == \"allow-nan\",\n   1069     )\n   1071 if copy:\n   1072     if _is_numpy_namespace(xp):\n   1073         # only make a copy if `array` and `array_orig` may share memory`\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/utils/validation.py:123, in _assert_all_finite(X, allow_nan, msg_dtype, estimator_name, input_name)\n    120 if first_pass_isfinite:\n    121     return\n--&gt; 123 _assert_all_finite_element_wise(\n    124     X,\n    125     xp=xp,\n    126     allow_nan=allow_nan,\n    127     msg_dtype=msg_dtype,\n    128     estimator_name=estimator_name,\n    129     input_name=input_name,\n    130 )\n\nFile /usr/local/Caskroom/miniconda/base/lib/python3.12/site-packages/sklearn/utils/validation.py:172, in _assert_all_finite_element_wise(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\n    155 if estimator_name and input_name == \"X\" and has_nan_error:\n    156     # Improve the error message on how to handle missing values in\n    157     # scikit-learn.\n    158     msg_err += (\n    159         f\"\\n{estimator_name} does not accept missing values\"\n    160         \" encoded as NaN natively. For supervised learning, you might want\"\n   (...)\n    170         \"#estimators-that-handle-nan-values\"\n    171     )\n--&gt; 172 raise ValueError(msg_err)\n\nValueError: Input y contains NaN."
  },
  {
    "objectID": "Code-Notebooks/Workspace_MP.html",
    "href": "Code-Notebooks/Workspace_MP.html",
    "title": "Information about data",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nactivity = pd.read_csv('../data/Nutrition.csv')\nactivity.head()\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nGeoLocation\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n0\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\n2 or more races\nRACE\nRACE2PLUS\n\n\n1\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nRace/Ethnicity\nOther\nRACE\nRACEOTH\n\n\n2\n2011\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nPA\nPA1\nQ044\nVALUE\n2\nGender\nFemale\nGEN\nFEMALE\n\n\n3\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ036\nVALUE\n2\nAge (years)\n35 - 44\nAGEYR\nAGEYR3544\n\n\n4\n2011\n2011\nAK\nAlaska\nBRFSS\nObesity / Weight Status\nObesity / Weight Status\nPercent of adults aged 18 years and older who ...\n2011.0\nValue\n...\n(64.845079957001, -147.722059036)\nOWS\nOWS1\nQ037\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n\n\n5 rows × 33 columns\nactivity.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 104272 entries, 0 to 104271\nData columns (total 33 columns):\n #   Column                      Non-Null Count   Dtype  \n---  ------                      --------------   -----  \n 0   YearStart                   104272 non-null  int64  \n 1   YearEnd                     104272 non-null  int64  \n 2   LocationAbbr                104272 non-null  object \n 3   LocationDesc                104272 non-null  object \n 4   Datasource                  104272 non-null  object \n 5   Class                       104272 non-null  object \n 6   Topic                       104272 non-null  object \n 7   Question                    104272 non-null  object \n 8   Data_Value_Unit             88872 non-null   float64\n 9   Data_Value_Type             104272 non-null  object \n 10  Data_Value                  93505 non-null   float64\n 11  Data_Value_Alt              93505 non-null   float64\n 12  Data_Value_Footnote_Symbol  10767 non-null   object \n 13  Data_Value_Footnote         10767 non-null   object \n 14  Low_Confidence_Limit        93505 non-null   float64\n 15  High_Confidence_Limit       93505 non-null   float64\n 16  Sample_Size                 93505 non-null   float64\n 17  Total                       3724 non-null    object \n 18  Age(years)                  22344 non-null   object \n 19  Education                   14896 non-null   object \n 20  Gender                      7448 non-null    object \n 21  Income                      26068 non-null   object \n 22  Race/Ethnicity              29792 non-null   object \n 23  GeoLocation                 102340 non-null  object \n 24  ClassID                     104272 non-null  object \n 25  TopicID                     104272 non-null  object \n 26  QuestionID                  104272 non-null  object \n 27  DataValueTypeID             104272 non-null  object \n 28  LocationID                  104272 non-null  int64  \n 29  StratificationCategory1     104272 non-null  object \n 30  Stratification1             104272 non-null  object \n 31  StratificationCategoryId1   104272 non-null  object \n 32  StratificationID1           104272 non-null  object \ndtypes: float64(6), int64(3), object(24)\nmemory usage: 26.3+ MB\nEach row represents a combination of a year, state, survey question, and percent of individuals who are positively identified for that question, along with stratification. The categories for stratification are Age Range, Education, Gender, Income, Race/Ethnicity, and Total.\nThis dataset includes observations for the years 2011-2023. Percentages and data are not included for groups with insufficient sample sizes.\nactivity_clean = activity.copy()\nWe are only interested in questions related to physical activity stratified by income.\nactivity_clean = activity_clean.loc[activity_clean['Topic'] == 'Physical Activity - Behavior']\nactivity_clean.drop(columns=[\"Total\", \"Education\", \"Age(years)\", \"Gender\", \"Race/Ethnicity\", \"GeoLocation\"], inplace=True)\nactivity_clean = activity_clean[activity_clean['StratificationCategory1'] == \"Income\"]\nactivity_clean.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 13930 entries, 13 to 104269\nData columns (total 27 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   YearStart                   13930 non-null  int64  \n 1   YearEnd                     13930 non-null  int64  \n 2   LocationAbbr                13930 non-null  object \n 3   LocationDesc                13930 non-null  object \n 4   Datasource                  13930 non-null  object \n 5   Class                       13930 non-null  object \n 6   Topic                       13930 non-null  object \n 7   Question                    13930 non-null  object \n 8   Data_Value_Unit             11620 non-null  float64\n 9   Data_Value_Type             13930 non-null  object \n 10  Data_Value                  13775 non-null  float64\n 11  Data_Value_Alt              13775 non-null  float64\n 12  Data_Value_Footnote_Symbol  155 non-null    object \n 13  Data_Value_Footnote         155 non-null    object \n 14  Low_Confidence_Limit        13775 non-null  float64\n 15  High_Confidence_Limit       13775 non-null  float64\n 16  Sample_Size                 13775 non-null  float64\n 17  Income                      13930 non-null  object \n 18  ClassID                     13930 non-null  object \n 19  TopicID                     13930 non-null  object \n 20  QuestionID                  13930 non-null  object \n 21  DataValueTypeID             13930 non-null  object \n 22  LocationID                  13930 non-null  int64  \n 23  StratificationCategory1     13930 non-null  object \n 24  Stratification1             13930 non-null  object \n 25  StratificationCategoryId1   13930 non-null  object \n 26  StratificationID1           13930 non-null  object \ndtypes: float64(6), int64(3), object(18)\nmemory usage: 3.0+ MB"
  },
  {
    "objectID": "Code-Notebooks/Workspace_MP.html#dealing-with-missing-values-and-similar-columns",
    "href": "Code-Notebooks/Workspace_MP.html#dealing-with-missing-values-and-similar-columns",
    "title": "Information about data",
    "section": "Dealing with Missing Values and Similar Columns",
    "text": "Dealing with Missing Values and Similar Columns\nDoes YearStart always equal YearEnd?\n\nactivity_clean.loc[activity_clean['YearStart'] != activity_clean['YearEnd']]\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nIncome\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n\n\n0 rows × 27 columns\n\n\n\nThey are always equal, so drop unnecessary column\n\nactivity_clean.drop(columns='YearEnd')\n\n\n\n\n\n\n\n\nYearStart\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\nData_Value\n...\nIncome\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n13\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n17.3\n...\n$15,000 - $24,999\nPA\nPA1\nQ044\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n16\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\n2011.0\nValue\n19.2\n...\n$50,000 - $74,999\nPA\nPA1\nQ047\nVALUE\n2\nIncome\n$50,000 - $74,999\nINC\nINC5075\n\n\n40\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\n2011.0\nValue\n59.3\n...\n$50,000 - $74,999\nPA\nPA1\nQ043\nVALUE\n2\nIncome\n$50,000 - $74,999\nINC\nINC5075\n\n\n42\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\n2011.0\nValue\n38.0\n...\n$75,000 or greater\nPA\nPA1\nQ046\nVALUE\n2\nIncome\n$75,000 or greater\nINC\nINC75PLUS\n\n\n55\n2011\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 300 min...\n2011.0\nValue\n44.8\n...\n$75,000 or greater\nPA\nPA1\nQ045\nVALUE\n2\nIncome\n$75,000 or greater\nINC\nINC75PLUS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n104247\n2023\nWY\nWyoming\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 300 min...\nNaN\nValue\n52.9\n...\n$50,000 - $74,999\nPA\nPA1\nQ045\nVALUE\n56\nIncome\n$50,000 - $74,999\nINC\nINC5075\n\n\n104249\n2023\nWY\nWyoming\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in muscle-strengt...\nNaN\nValue\n31.9\n...\nLess than $15,000\nPA\nPA1\nQ046\nVALUE\n56\nIncome\nLess than $15,000\nINC\nINCLESS15\n\n\n104259\n2023\nWY\nWyoming\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\nNaN\nValue\n32.9\n...\n$75,000 or greater\nPA\nPA1\nQ044\nVALUE\n56\nIncome\n$75,000 or greater\nINC\nINC75PLUS\n\n\n104261\n2023\nWY\nWyoming\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who achieve at least 150 min...\nNaN\nValue\n58.5\n...\n$25,000 - $34,999\nPA\nPA1\nQ043\nVALUE\n56\nIncome\n$25,000 - $34,999\nINC\nINC2535\n\n\n104269\n2023\nWY\nWyoming\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n22.5\n...\nData not reported\nPA\nPA1\nQ047\nVALUE\n56\nIncome\nData not reported\nINC\nINCNR\n\n\n\n\n13930 rows × 26 columns\n\n\n\n\ncols_with_nulls = []\nfor col in activity_clean.columns:\n    if activity_clean[col].isna().sum() &gt; 0:\n        cols_with_nulls.append(col)\n\nprint(f\"Columns with 1 or more missing values:\")\nfor i in cols_with_nulls:\n    print(i)\n\nColumns with 1 or more missing values:\nData_Value_Unit\nData_Value\nData_Value_Alt\nData_Value_Footnote_Symbol\nData_Value_Footnote\nLow_Confidence_Limit\nHigh_Confidence_Limit \nSample_Size\n\n\n\nData_Value_Unit\n\nactivity_clean.loc[activity_clean['Data_Value_Unit'].isna()].head()\n\n\n\n\n\n\n\n\nYearStart\nYearEnd\nLocationAbbr\nLocationDesc\nDatasource\nClass\nTopic\nQuestion\nData_Value_Unit\nData_Value_Type\n...\nIncome\nClassID\nTopicID\nQuestionID\nDataValueTypeID\nLocationID\nStratificationCategory1\nStratification1\nStratificationCategoryId1\nStratificationID1\n\n\n\n\n88893\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\nLess than $15,000\nPA\nPA1\nQ047\nVALUE\n2\nIncome\nLess than $15,000\nINC\nINCLESS15\n\n\n88902\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\nData not reported\nPA\nPA1\nQ047\nVALUE\n2\nIncome\nData not reported\nINC\nINCNR\n\n\n88907\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\n$15,000 - $24,999\nPA\nPA1\nQ047\nVALUE\n2\nIncome\n$15,000 - $24,999\nINC\nINC1525\n\n\n88941\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\n$35,000 - $49,999\nPA\nPA1\nQ047\nVALUE\n2\nIncome\n$35,000 - $49,999\nINC\nINC3550\n\n\n88944\n2022\n2022\nAK\nAlaska\nBRFSS\nPhysical Activity\nPhysical Activity - Behavior\nPercent of adults who engage in no leisure-tim...\nNaN\nValue\n...\n$75,000 or greater\nPA\nPA1\nQ047\nVALUE\n2\nIncome\n$75,000 or greater\nINC\nINC75PLUS\n\n\n\n\n5 rows × 27 columns\n\n\n\n\nactivity_clean.loc[activity_clean['Data_Value_Unit'].isna()]['Question'].unique()\n\narray(['Percent of adults who engage in no leisure-time physical activity',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week'],\n      dtype=object)\n\n\n\nactivity_clean['Data_Value_Unit'].unique()\n\narray([2011., 2012., 2013., 2014., 2015., 2016., 2017., 2018., 2019.,\n       2020., 2021.,   nan])\n\n\nThe description of the dataset describes Data_Value_Unit as “Description of unit e.g. %, etc” but this does not seem accurate, as the non-null values are years.\n\nactivity_clean = activity_clean.drop(columns=['Data_Value_Unit'])\n\n\n\nData_Value\n\nactivity_clean = activity_clean.dropna(subset=['Data_Value'])\n\n\n\nData_Value_Alt\nDescription: “Numeric representation of data value”\n\n# How many differences are there between Data_Value and Data_Value_Alt?\n(activity_clean['Data_Value'] == activity_clean['Data_Value_Alt']).value_counts()\n\nTrue    13775\nName: count, dtype: int64\n\n\n\n# What do these differences look like\nactivity_clean.loc[(activity_clean['Data_Value_Alt'] != activity_clean['Data_Value']), ['Data_Value', 'Data_Value_Alt']]\n\n\n\n\n\n\n\n\nData_Value\nData_Value_Alt\n\n\n\n\n\n\n\n\n\n\n# Are all of them pairs of NaNs?\nactivity_clean.loc[((activity_clean['Data_Value_Alt'] != activity_clean['Data_Value']) & \n                     (activity_clean['Data_Value_Alt'].notna() | activity_clean['Data_Value'].notna())), \n                    ['Data_Value', 'Data_Value_Alt']]\n\n\n\n\n\n\n\n\nData_Value\nData_Value_Alt\n\n\n\n\n\n\n\n\n\nAll of the columns where Data_Value and Data_Value_Alt are not equal are pairs of NaNs (Python doesn’t see 2 NaNs as equal). It is reasonable to drop Data_Value_Alt here because it does not add any additional meaning to the data.\n\nactivity_clean = activity_clean.drop(columns=['Data_Value_Alt'])\n\n\n\nData_Value_Footnote and Data_Value_Footnote_Symbol\n\n# What values are present in these columns?\nprint('Data_Value_Footnote:')\nprint(activity_clean['Data_Value_Footnote'].unique())\nprint('\\nData_Value_Footnote_Symbol:')\nprint(activity_clean['Data_Value_Footnote_Symbol'].unique())\n\nData_Value_Footnote:\n[nan]\n\nData_Value_Footnote_Symbol:\n[nan]\n\n\n\n# Are there any differences between these 2 columns?\n(activity_clean['Data_Value_Footnote'] == activity_clean['Data_Value_Footnote_Symbol']).value_counts()\n\nFalse    13775\nName: count, dtype: int64\n\n\nThere are no differences between these 2 columns and the column name is not very descriptive of what values are present in the columns. It would make more sense to have a column called “Sample_Size_Insufficient” with binary values.\n\nactivity_clean['Sample_Size_Insufficient'] = activity_clean[\"Data_Value_Footnote_Symbol\"].map({np.nan:0, '~':1})\n\n\nactivity_clean = activity_clean.drop(columns=['Data_Value_Footnote', 'Data_Value_Footnote_Symbol'])\n\n\n\nLow_Confidence_Limit and High_Confidence_Limit\n\n# Rename to remove trailing whitespace\nactivity_clean['High_Confidence_Limit'] = activity_clean['High_Confidence_Limit ']\n\n\n# Drop column with extra whitespace\nactivity_clean = activity_clean.drop(columns=['High_Confidence_Limit '])\n\n\n# What do these columns look like?\nactivity_clean.loc[:,['Low_Confidence_Limit','High_Confidence_Limit']]\n\n\n\n\n\n\n\n\nLow_Confidence_Limit\nHigh_Confidence_Limit\n\n\n\n\n13\n12.5\n23.4\n\n\n16\n15.1\n24.1\n\n\n40\n53.2\n65.0\n\n\n42\n34.1\n42.1\n\n\n55\n40.7\n48.9\n\n\n...\n...\n...\n\n\n104247\n47.6\n58.1\n\n\n104249\n23.6\n41.5\n\n\n104259\n27.7\n38.6\n\n\n104261\n52.3\n64.5\n\n\n104269\n20.0\n25.2\n\n\n\n\n13775 rows × 2 columns\n\n\n\n\n# If there's a null in one column, are there nulls in both?\n(activity_clean['Low_Confidence_Limit'].isna() == activity_clean['High_Confidence_Limit'].isna()).value_counts()\n\nTrue    13775\nName: count, dtype: int64"
  },
  {
    "objectID": "Code-Notebooks/Workspace_MP.html#analysis",
    "href": "Code-Notebooks/Workspace_MP.html#analysis",
    "title": "Information about data",
    "section": "Analysis",
    "text": "Analysis\n\nquestions = activity_clean['Question'].unique()\nquestions\n\narray(['Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic physical activity and engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who engage in no leisure-time physical activity',\n       'Percent of adults who achieve at least 150 minutes a week of moderate-intensity aerobic physical activity or 75 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)',\n       'Percent of adults who engage in muscle-strengthening activities on 2 or more days a week',\n       'Percent of adults who achieve at least 300 minutes a week of moderate-intensity aerobic physical activity or 150 minutes a week of vigorous-intensity aerobic activity (or an equivalent combination)'],\n      dtype=object)\n\n\nResearch question: Do higher-income populations consistently have more time for physical activity than lower income populations?\nVariables of interest: YearStart, LocationAbbr - denote which study each data point came from\nQuestion - what is being measured\nData_Value - percentage who engage in/achieve the question metric (dependent variable)\nIncome - shows income level (independent variable)\nEncoding income as a numeric variable for linear regression\n\nactivity_clean['Income'].unique()\n\narray(['$15,000 - $24,999', '$50,000 - $74,999', '$75,000 or greater',\n       '$25,000 - $34,999', 'Less than $15,000', '$35,000 - $49,999',\n       'Data not reported'], dtype=object)\n\n\n\n# maps income ranges to starting numeric value in range\nincome_dict = {'$15,000 - $24,999':15000, \"$35,000 - $49,999\":35000, '$50,000 - $74,999':50000, '$75,000 or greater':75000,\n       '$25,000 - $34,999':25000, 'Less than $15,000':0}\n# removes data not reported\nactivity_clean = activity_clean.loc[activity_clean['Income'] != 'Data not reported']\n\n\n# creates numeric column of income based on mappings\nactivity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n\nC:\\Users\\Colorfulgeek\\AppData\\Local\\Temp\\ipykernel_26716\\1667508522.py:9: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  activity_clean['numeric_income'] = activity_clean['Income'].replace(income_dict)\n\n\n\nactivity_clean.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 11807 entries, 13 to 104261\nData columns (total 25 columns):\n #   Column                     Non-Null Count  Dtype  \n---  ------                     --------------  -----  \n 0   YearStart                  11807 non-null  int64  \n 1   YearEnd                    11807 non-null  int64  \n 2   LocationAbbr               11807 non-null  object \n 3   LocationDesc               11807 non-null  object \n 4   Datasource                 11807 non-null  object \n 5   Class                      11807 non-null  object \n 6   Topic                      11807 non-null  object \n 7   Question                   11807 non-null  object \n 8   Data_Value_Type            11807 non-null  object \n 9   Data_Value                 11807 non-null  float64\n 10  Low_Confidence_Limit       11807 non-null  float64\n 11  Sample_Size                11807 non-null  float64\n 12  Income                     11807 non-null  object \n 13  ClassID                    11807 non-null  object \n 14  TopicID                    11807 non-null  object \n 15  QuestionID                 11807 non-null  object \n 16  DataValueTypeID            11807 non-null  object \n 17  LocationID                 11807 non-null  int64  \n 18  StratificationCategory1    11807 non-null  object \n 19  Stratification1            11807 non-null  object \n 20  StratificationCategoryId1  11807 non-null  object \n 21  StratificationID1          11807 non-null  object \n 22  Sample_Size_Insufficient   11807 non-null  int64  \n 23  High_Confidence_Limit      11807 non-null  float64\n 24  numeric_income             11807 non-null  int64  \ndtypes: float64(4), int64(5), object(16)\nmemory usage: 2.3+ MB\n\n\n\nactivity_clean.columns\n\nIndex(['YearStart', 'YearEnd', 'LocationAbbr', 'LocationDesc', 'Datasource',\n       'Class', 'Topic', 'Question', 'Data_Value_Type', 'Data_Value',\n       'Low_Confidence_Limit', 'Sample_Size', 'Income', 'ClassID', 'TopicID',\n       'QuestionID', 'DataValueTypeID', 'LocationID',\n       'StratificationCategory1', 'Stratification1',\n       'StratificationCategoryId1', 'StratificationID1',\n       'Sample_Size_Insufficient', 'High_Confidence_Limit', 'numeric_income'],\n      dtype='object')\n\n\n\nno_leisure_time = activity_clean[activity_clean['Question'] == 'Percent of adults who engage in no leisure-time physical activity'] \n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\nsns.set_style(style='whitegrid')\nsns.scatterplot(data=no_leisure_time, x='numeric_income', y='Data_Value', alpha=0.1)\n\nmodel = LinearRegression()\nx = no_leisure_time[['numeric_income']]\ny = no_leisure_time['Data_Value']\nmodel.fit(x, y)\n\nslope = model.coef_[0]\nintercept = model.intercept_\nr_squared = model.score(x, y)\n\nx_range = np.linspace(x.min(), x.max(), 100)  # Range of x values\ny_pred = model.predict(x_range)  # Predicted y values\nplt.plot(x_range, y_pred, color='red', label=f\"y = {slope:.2f}x + {intercept:.2f}, $R^2$ = {r_squared:.2f}\")\n\nplt.title(\"Percent of sample population who engage in no leisure time activity\", fontsize=14)\nplt.xlabel(\"Minimum Income in Range (i.e. 15,000 for \\$15,000 - \\$24,999)\", fontsize=12)\nplt.ylabel(\"Percent of Sample Population\", fontsize=12)\nplt.legend()\nplt.show()\n\n&lt;&gt;:22: SyntaxWarning: invalid escape sequence '\\$'\n&lt;&gt;:22: SyntaxWarning: invalid escape sequence '\\$'\nC:\\Users\\Colorfulgeek\\AppData\\Local\\Temp\\ipykernel_26716\\4111186112.py:22: SyntaxWarning: invalid escape sequence '\\$'\n  plt.xlabel(\"Minimum Income in Range (i.e. 15,000 for \\$15,000 - \\$24,999)\", fontsize=12)\nc:\\Users\\Colorfulgeek\\anaconda3\\envs\\DataScienceClass\\Lib\\site-packages\\sklearn\\utils\\validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n\n# create a FacetGrid to generate separate plots for each unique value of 'Question'\ng = sns.FacetGrid(activity_clean, col='Question', col_wrap=1, height=4)  \n\n# map the scatterplot to each facet\ng.map(sns.scatterplot, 'numeric_income', 'Data_Value')\n\n# adjust the layout and show t\ng.fig.suptitle('Scatter plots of Numeric Income vs Data Value by Question', fontsize=16)\nplt.show()"
  },
  {
    "objectID": "Code-Notebooks/Workspace_SMG2.html",
    "href": "Code-Notebooks/Workspace_SMG2.html",
    "title": "Workspace - Sarah ##",
    "section": "",
    "text": "# Import Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Load Data\nnutrition = pd.read_csv('../data/Nutrition.csv')\n\n\n# Copy for Cleaning\nnutrition_1 = nutrition.copy()\n#nutrition_1.info()\n\n\n# Percent of Adults who Engage in No Leisure-Time Physical Activity - Investigate and Start Cleaning\n\n# Filter df to no leisure time physical activity, excluding sample size too small, only include Income rows\nno_lesisure = (nutrition_1[nutrition_1['Question'] == 'Percent of adults who engage in no leisure-time physical activity'])\nno_lesisure = (no_lesisure[no_lesisure['Data_Value_Footnote_Symbol'] != '~'])\nno_lesisure = (no_lesisure[no_lesisure['StratificationCategoryId1'] == 'INC'])\n\n# Keep only Year, Percent, and Income Level. Rename Income Level Column\nno_lesisure = no_lesisure[['YearStart', 'Data_Value','Stratification1']]\nno_lesisure.rename(columns ={'Stratification1' : 'Income_Range'}, inplace= True)\n\n# Average the Percent of No Lesiure individuals by Year and Income:\ngrouped_no_lesire = no_lesisure.groupby(['YearStart','Income_Range'])['Data_Value'].mean().reset_index()\n\n# Info: No Leisure by Income:\ngrouped_no_lesire.info()\n\n# No Lesiure by Income Print:\nprint(\"\\n\",\"View: Average No Leisure by Year and Income:\",\"\\n\",grouped_no_lesire)\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 91 entries, 0 to 90\nData columns (total 3 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   YearStart     91 non-null     int64  \n 1   Income_Range  91 non-null     object \n 2   Data_Value    91 non-null     float64\ndtypes: float64(1), int64(1), object(1)\nmemory usage: 2.3+ KB\n\n View: Average No Leisure by Year and Income: \n     YearStart        Income_Range  Data_Value\n0        2011   $15,000 - $24,999   33.398077\n1        2011   $25,000 - $34,999   29.407692\n2        2011   $35,000 - $49,999   25.611538\n3        2011   $50,000 - $74,999   21.878846\n4        2011  $75,000 or greater   15.938462\n..        ...                 ...         ...\n86       2023   $35,000 - $49,999   28.626415\n87       2023   $50,000 - $74,999   23.226415\n88       2023  $75,000 or greater   18.550943\n89       2023   Data not reported   20.260377\n90       2023   Less than $15,000   41.569811\n\n[91 rows x 3 columns]\n\n\n\n# Graph Lineplot of No Leisure Time Physical Activity by Year and Income Range:\nplt.figure(figsize=(8, 6))\nmypal = sns.color_palette('RdPu', 7)\nLineplot_1 =  sns.lineplot(data=grouped_no_lesire, x = 'YearStart', y = 'Data_Value', hue = 'Income_Range', palette=mypal)\nplt.xlabel('Year')\nplt.ylabel('Average Percent No Leisure')\nplt.title('No Leisure-Time Physical Activity:\\nAverage Percent of Adults by Year')\nplt.xticks(rotation=45)\nplt.legend(title='Income Range:', loc = 'upper right', bbox_to_anchor = (1.35,1))\nplt.show()\n\n\n\n\n\n\n\n\n\n# Make copy and remove 'Data Not Reported' data\ngrouped2 = grouped_no_lesire.copy()\ngrouped2 = (grouped2[grouped2['Income_Range'] != 'Data not reported'])\n\n# Group Income into Tiers\ngrouped2['Income_Group'] = np.where(grouped2['Income_Range'] == 'Less than $15,000','Tier 1',np.where(\n    grouped2['Income_Range'] == '$15,000 - $24,999', 'Tier 1', np.where(\n        grouped2['Income_Range'] =='$25,000 - $34,999', 'Tier 2', np.where(\n           grouped2['Income_Range'] == '$35,000 - $49,999', 'Tier 2', 'Tier 3'\n        )\n    ) \n))\n\n# View/Validate income groups:\nunique_combo1 = grouped2[['Income_Range', 'Income_Group']].drop_duplicates()\nprint(unique_combo1)\n\n         Income_Range Income_Group\n0   $15,000 - $24,999       Tier 1\n1   $25,000 - $34,999       Tier 2\n2   $35,000 - $49,999       Tier 2\n3   $50,000 - $74,999       Tier 3\n4  $75,000 or greater       Tier 3\n6   Less than $15,000       Tier 1\n\n\n\n# Average the Percent of No Lesiure individuals by Year and Income Group:\ngrouped2 = grouped2.groupby(['YearStart','Income_Group'])['Data_Value'].mean().reset_index()# No Lesiure by Income Group Print:\n\nprint(\"\\n\",\"View: Average No Leisure by Year and Income Group:\",\"\\n\",grouped2)\n\n\n View: Average No Leisure by Year and Income Group: \n     YearStart Income_Group  Data_Value\n0        2011       Tier 1   33.946154\n1        2011       Tier 2   27.509615\n2        2011       Tier 3   18.908654\n3        2012       Tier 1   33.384615\n4        2012       Tier 2   24.277885\n5        2012       Tier 3   14.807692\n6        2013       Tier 1   35.033654\n7        2013       Tier 2   28.327885\n8        2013       Tier 3   19.170192\n9        2014       Tier 1   34.458333\n10       2014       Tier 2   24.817593\n11       2014       Tier 3   15.215741\n12       2015       Tier 1   35.737963\n13       2015       Tier 2   28.783333\n14       2015       Tier 3   19.775000\n15       2016       Tier 1   36.065455\n16       2016       Tier 2   26.095455\n17       2016       Tier 3   15.736364\n18       2017       Tier 1   36.543519\n19       2017       Tier 2   30.244444\n20       2017       Tier 3   20.700000\n21       2018       Tier 1   37.400926\n22       2018       Tier 2   27.048148\n23       2018       Tier 3   16.459259\n24       2019       Tier 1   38.366981\n25       2019       Tier 2   29.700000\n26       2019       Tier 3   19.341509\n27       2020       Tier 1   36.685185\n28       2020       Tier 2   26.972222\n29       2020       Tier 3   16.308333\n30       2021       Tier 1   38.494444\n31       2021       Tier 2   29.026852\n32       2021       Tier 3   19.046279\n33       2022       Tier 1   38.917273\n34       2022       Tier 2   28.591818\n35       2022       Tier 3   19.110000\n36       2023       Tier 1   40.808491\n37       2023       Tier 2   31.153774\n38       2023       Tier 3   20.888679\n\n\n\n# Graph Lineplot of No Leisure Time Physical Activity by Year and Income Group:\nplt.figure(figsize=(8, 6))\nmypal = sns.color_palette('dark:#5A9_r', 3)\nLineplot_2 =  sns.lineplot(data=grouped2, x = 'YearStart', y = 'Data_Value', hue = 'Income_Group', palette=mypal)\nplt.xlabel('Year')\nplt.ylabel('Average Percent No Leisure')\nplt.title('No Leisure-Time Physical Activity:\\nAverage Percent of Adults by Year and Income Group')\nplt.xticks(rotation=45)\nplt.legend(title='Income Group:', loc = 'upper right', bbox_to_anchor = (1.20,1))\nplt.show()"
  },
  {
    "objectID": "contract.html",
    "href": "contract.html",
    "title": "Team Project Contract",
    "section": "",
    "text": "Cas Laskowski:claskowski@arizona.edu\nMiguel Peralta: miguelperalta@arizona.edu\nSarah Gilbride:sarahgilbride@arizona.edu\nQuinn Jones:[contact information]\nVera Jackson: verasjackson@arizona.edu"
  },
  {
    "objectID": "contract.html#project-title-title-of-the-final-project",
    "href": "contract.html#project-title-title-of-the-final-project",
    "title": "Team Project Contract",
    "section": "",
    "text": "Cas Laskowski:claskowski@arizona.edu\nMiguel Peralta: miguelperalta@arizona.edu\nSarah Gilbride:sarahgilbride@arizona.edu\nQuinn Jones:[contact information]\nVera Jackson: verasjackson@arizona.edu"
  },
  {
    "objectID": "contract.html#project-overview",
    "href": "contract.html#project-overview",
    "title": "Team Project Contract",
    "section": "Project Overview",
    "text": "Project Overview\n\nProject Description\n[A brief overview of the project, including the main objectives and purpose.]\n\n\nExpected Deliverables\n[List of specific outputs, such as final visualizations, reports, presentations.]"
  },
  {
    "objectID": "contract.html#team-goals",
    "href": "contract.html#team-goals",
    "title": "Team Project Contract",
    "section": "Team Goals",
    "text": "Team Goals\n\nProject Goals\n[A few bullet points outlining what the team aims to achieve.]\n\n\nLearning Objectives\n[What skills or knowledge each team member hopes to develop.]"
  },
  {
    "objectID": "contract.html#team-roles-and-responsibilities",
    "href": "contract.html#team-roles-and-responsibilities",
    "title": "Team Project Contract",
    "section": "Team Roles and Responsibilities",
    "text": "Team Roles and Responsibilities\n\nRoles (change as needed)\n\nProject Manager: [Name] – Ensures timelines are met, organizes meetings, and manages communications.\nData Analyst: [Name] – Responsible for data cleaning, analysis, and exploratory visualizations.\nVisualization Specialist: [Name] – Designs the final visualizations and makes aesthetic choices.\nDocumentation Lead: [Name] – Keeps detailed notes, ensures all project decisions are documented, and handles the final report.\n\n\n\nGeneral Responsibilities\nEach team member is responsible for: - Participating actively in all meetings. - Completing their assigned tasks on time. - Communicating openly and promptly if issues arise."
  },
  {
    "objectID": "contract.html#communication-plan",
    "href": "contract.html#communication-plan",
    "title": "Team Project Contract",
    "section": "Communication Plan",
    "text": "Communication Plan\n\nMeeting Schedule\nWeekly on 9:00 AM Arizona Time via Slack.\n\n\nPrimary Communication Platform\nSlack\n\n\nDecision-Making Process\nDecisions will be made by consensus; if a consensus cannot be reached, a vote will be taken."
  },
  {
    "objectID": "contract.html#work-plan-and-timeline",
    "href": "contract.html#work-plan-and-timeline",
    "title": "Team Project Contract",
    "section": "Work Plan and Timeline",
    "text": "Work Plan and Timeline\n\nMilestones\n\nData Collection and Cleaning: Completed by [Date].\nExploratory Data Analysis: Completed by [Date].\nDesign of Visualizations: Completed by [Date].\nFinal Presentation and Report: Completed by [Date].\n\n\n\nTask Assignments\n\n\n\nTask\nAssigned To\nDue Date\n\n\n\n\nTask 1\n[Name]\n[Date]\n\n\nTask 2\n[Name]\n[Date]"
  },
  {
    "objectID": "contract.html#accountability-and-expectations",
    "href": "contract.html#accountability-and-expectations",
    "title": "Team Project Contract",
    "section": "Accountability and Expectations",
    "text": "Accountability and Expectations\n\nAttendance Policy\nAll team members are expected to attend scheduled meetings unless previously discussed.\n\n\nQuality of Work\nAll deliverables should be completed to a professional standard.\n\n\nDeadlines\nAll members are responsible for meeting deadlines. If someone cannot meet a deadline, they must notify the team in advance."
  },
  {
    "objectID": "contract.html#conflict-resolution-plan",
    "href": "contract.html#conflict-resolution-plan",
    "title": "Team Project Contract",
    "section": "Conflict Resolution Plan",
    "text": "Conflict Resolution Plan\n\nConflict Management\nIf a conflict arises, team members will: - Discuss the issue openly during a team meeting. - Attempt to resolve the issue through compromise. - If the conflict persists, consult the project supervisor for guidance."
  },
  {
    "objectID": "contract.html#signatures",
    "href": "contract.html#signatures",
    "title": "Team Project Contract",
    "section": "Signatures",
    "text": "Signatures\nBy signing below, each team member agrees to the terms of this contract and commits to working together effectively and respectfully.\n\nCas Laskowski: CML Date: 10/17/2024\nMiguel Peralta: MCAP Date: 10/14/2024\nSarah Gilbride: SMG Date: 10/14/2024\nQuinn Jones: QAJ Date: 10/15/2024\nVera Jackson: VSJ Date: 10/14/2024"
  },
  {
    "objectID": "presentation.html#quarto",
    "href": "presentation.html#quarto",
    "title": "Project title",
    "section": "Quarto",
    "text": "Quarto\n\nThe presentation is created using the Quarto CLI\n## sets the start of a new slide"
  },
  {
    "objectID": "presentation.html#layouts",
    "href": "presentation.html#layouts",
    "title": "Project title",
    "section": "Layouts",
    "text": "Layouts\nYou can use plain text\n\n\n\nor bullet points1\n\n\nor in two columns\n\n\nlike\nthis\n\nAnd add footnotes"
  },
  {
    "objectID": "presentation.html#code",
    "href": "presentation.html#code",
    "title": "Project title",
    "section": "Code",
    "text": "Code\n\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                    mpg   R-squared:                       0.073\nModel:                            OLS   Adj. R-squared:                  0.070\nMethod:                 Least Squares   F-statistic:                     30.59\nDate:                Fri, 20 Dec 2024   Prob (F-statistic):           5.84e-08\nTime:                        10:18:49   Log-Likelihood:                -1346.4\nNo. Observations:                 392   AIC:                             2697.\nDf Residuals:                     390   BIC:                             2705.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nconst         35.8015      2.266     15.800      0.000      31.347      40.257\nspeed       -354.7055     64.129     -5.531      0.000    -480.788    -228.623\n==============================================================================\nOmnibus:                       27.687   Durbin-Watson:                   0.589\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               18.976\nSkew:                           0.420   Prob(JB):                     7.57e-05\nKurtosis:                       2.323   Cond. No.                         169.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "presentation.html#plots",
    "href": "presentation.html#plots",
    "title": "Project title",
    "section": "Plots",
    "text": "Plots"
  },
  {
    "objectID": "presentation.html#plot-and-text",
    "href": "presentation.html#plot-and-text",
    "title": "Project title",
    "section": "Plot and text",
    "text": "Plot and text\n\n\n\nSome text\ngoes here"
  },
  {
    "objectID": "presentation.html#tables",
    "href": "presentation.html#tables",
    "title": "Project title",
    "section": "Tables",
    "text": "Tables\nIf you want to generate a table, make sure it is in the HTML format (instead of Markdown or other formats), e.g.,\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\n\n\n\nisland\n\n\n\nbill_length_mm\n\n\n\nbill_depth_mm\n\n\n\nflipper_length_mm\n\n\n\nbody_mass_g\n\n\n\nsex\n\n\n\n\n\n\n\n\n\n\n\n0\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n39.1\n\n\n\n18.7\n\n\n\n181.0\n\n\n\n3750.0\n\n\n\nMale\n\n\n\n\n\n\n\n1\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n39.5\n\n\n\n17.4\n\n\n\n186.0\n\n\n\n3800.0\n\n\n\nFemale\n\n\n\n\n\n\n\n2\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n40.3\n\n\n\n18.0\n\n\n\n195.0\n\n\n\n3250.0\n\n\n\nFemale\n\n\n\n\n\n\n\n4\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n36.7\n\n\n\n19.3\n\n\n\n193.0\n\n\n\n3450.0\n\n\n\nFemale\n\n\n\n\n\n\n\n5\n\n\n\nAdelie\n\n\n\nTorgersen\n\n\n\n39.3\n\n\n\n20.6\n\n\n\n190.0\n\n\n\n3650.0\n\n\n\nMale"
  },
  {
    "objectID": "presentation.html#images",
    "href": "presentation.html#images",
    "title": "Project title",
    "section": "Images",
    "text": "Images\n\nImage credit: Danielle Navarro, Percolate."
  },
  {
    "objectID": "presentation.html#math-expressions",
    "href": "presentation.html#math-expressions",
    "title": "Project title",
    "section": "Math Expressions",
    "text": "Math Expressions\nYou can write LaTeX math expressions inside a pair of dollar signs, e.g. $\\alpha+\\beta$ renders \\(\\alpha + \\beta\\). You can use the display style with double dollar signs:\n$$\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i$$\n\\[\n\\bar{X}=\\frac{1}{n}\\sum_{i=1}^nX_i\n\\]\nLimitations:\n\nThe source code of a LaTeX math expression must be in one line, unless it is inside a pair of double dollar signs, in which case the starting $$ must appear in the very beginning of a line, followed immediately by a non-space character, and the ending $$ must be at the end of a line, led by a non-space character;\nThere should not be spaces after the opening $ or before the closing $."
  },
  {
    "objectID": "presentation.html#feeling-adventurous",
    "href": "presentation.html#feeling-adventurous",
    "title": "Project title",
    "section": "Feeling adventurous?",
    "text": "Feeling adventurous?\n\nYou are welcomed to use the default styling of the slides. In fact, that’s what I expect majority of you will do. You will differentiate yourself with the content of your presentation.\nBut some of you might want to play around with slide styling. Some solutions for this can be found at https://quarto.org/docs/presentations/revealjs."
  }
]